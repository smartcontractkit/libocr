// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: offchainreporting3_1_offchain_config.proto

package ocr3_1config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OffchainConfigProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeltaProgressNanoseconds                                uint64                        `protobuf:"varint,51,opt,name=delta_progress_nanoseconds,json=deltaProgressNanoseconds,proto3" json:"delta_progress_nanoseconds,omitempty"`
	DeltaResendNanoseconds                                  *uint64                       `protobuf:"varint,52,opt,name=delta_resend_nanoseconds,json=deltaResendNanoseconds,proto3,oneof" json:"delta_resend_nanoseconds,omitempty"`
	DeltaInitialNanoseconds                                 *uint64                       `protobuf:"varint,53,opt,name=delta_initial_nanoseconds,json=deltaInitialNanoseconds,proto3,oneof" json:"delta_initial_nanoseconds,omitempty"`
	DeltaRoundNanoseconds                                   uint64                        `protobuf:"varint,54,opt,name=delta_round_nanoseconds,json=deltaRoundNanoseconds,proto3" json:"delta_round_nanoseconds,omitempty"`
	DeltaGraceNanoseconds                                   uint64                        `protobuf:"varint,55,opt,name=delta_grace_nanoseconds,json=deltaGraceNanoseconds,proto3" json:"delta_grace_nanoseconds,omitempty"`
	DeltaReportsPlusPrecursorRequestNanoseconds             *uint64                       `protobuf:"varint,56,opt,name=delta_reports_plus_precursor_request_nanoseconds,json=deltaReportsPlusPrecursorRequestNanoseconds,proto3,oneof" json:"delta_reports_plus_precursor_request_nanoseconds,omitempty"`
	DeltaStageNanoseconds                                   uint64                        `protobuf:"varint,57,opt,name=delta_stage_nanoseconds,json=deltaStageNanoseconds,proto3" json:"delta_stage_nanoseconds,omitempty"`
	DeltaStateSyncSummaryIntervalNanoseconds                *uint64                       `protobuf:"varint,58,opt,name=delta_state_sync_summary_interval_nanoseconds,json=deltaStateSyncSummaryIntervalNanoseconds,proto3,oneof" json:"delta_state_sync_summary_interval_nanoseconds,omitempty"`
	DeltaBlockSyncMinRequestToSameOracleIntervalNanoseconds *uint64                       `protobuf:"varint,59,opt,name=delta_block_sync_min_request_to_same_oracle_interval_nanoseconds,json=deltaBlockSyncMinRequestToSameOracleIntervalNanoseconds,proto3,oneof" json:"delta_block_sync_min_request_to_same_oracle_interval_nanoseconds,omitempty"`
	DeltaBlockSyncResponseTimeoutNanoseconds                *uint64                       `protobuf:"varint,60,opt,name=delta_block_sync_response_timeout_nanoseconds,json=deltaBlockSyncResponseTimeoutNanoseconds,proto3,oneof" json:"delta_block_sync_response_timeout_nanoseconds,omitempty"`
	MaxBlocksPerBlockSyncResponse                           *uint32                       `protobuf:"varint,61,opt,name=max_blocks_per_block_sync_response,json=maxBlocksPerBlockSyncResponse,proto3,oneof" json:"max_blocks_per_block_sync_response,omitempty"`
	MaxParallelRequestedBlocks                              *uint64                       `protobuf:"varint,62,opt,name=max_parallel_requested_blocks,json=maxParallelRequestedBlocks,proto3,oneof" json:"max_parallel_requested_blocks,omitempty"`
	DeltaTreeSyncMinRequestToSameOracleIntervalNanoseconds  *uint64                       `protobuf:"varint,63,opt,name=delta_tree_sync_min_request_to_same_oracle_interval_nanoseconds,json=deltaTreeSyncMinRequestToSameOracleIntervalNanoseconds,proto3,oneof" json:"delta_tree_sync_min_request_to_same_oracle_interval_nanoseconds,omitempty"`
	DeltaTreeSyncResponseTimeoutNanoseconds                 *uint64                       `protobuf:"varint,64,opt,name=delta_tree_sync_response_timeout_nanoseconds,json=deltaTreeSyncResponseTimeoutNanoseconds,proto3,oneof" json:"delta_tree_sync_response_timeout_nanoseconds,omitempty"`
	MaxTreeSyncChunkKeys                                    *uint32                       `protobuf:"varint,65,opt,name=max_tree_sync_chunk_keys,json=maxTreeSyncChunkKeys,proto3,oneof" json:"max_tree_sync_chunk_keys,omitempty"`
	MaxTreeSyncChunkKeysPlusValuesBytes                     *uint32                       `protobuf:"varint,66,opt,name=max_tree_sync_chunk_keys_plus_values_bytes,json=maxTreeSyncChunkKeysPlusValuesBytes,proto3,oneof" json:"max_tree_sync_chunk_keys_plus_values_bytes,omitempty"`
	MaxParallelTreeSyncChunkFetches                         *uint32                       `protobuf:"varint,67,opt,name=max_parallel_tree_sync_chunk_fetches,json=maxParallelTreeSyncChunkFetches,proto3,oneof" json:"max_parallel_tree_sync_chunk_fetches,omitempty"`
	SnapshotInterval                                        *uint64                       `protobuf:"varint,68,opt,name=snapshot_interval,json=snapshotInterval,proto3,oneof" json:"snapshot_interval,omitempty"`
	MaxHistoricalSnapshotsRetained                          *uint64                       `protobuf:"varint,69,opt,name=max_historical_snapshots_retained,json=maxHistoricalSnapshotsRetained,proto3,oneof" json:"max_historical_snapshots_retained,omitempty"`
	DeltaBlobOfferMinRequestToSameOracleIntervalNanoseconds *uint64                       `protobuf:"varint,70,opt,name=delta_blob_offer_min_request_to_same_oracle_interval_nanoseconds,json=deltaBlobOfferMinRequestToSameOracleIntervalNanoseconds,proto3,oneof" json:"delta_blob_offer_min_request_to_same_oracle_interval_nanoseconds,omitempty"`
	DeltaBlobOfferResponseTimeoutNanoseconds                *uint64                       `protobuf:"varint,71,opt,name=delta_blob_offer_response_timeout_nanoseconds,json=deltaBlobOfferResponseTimeoutNanoseconds,proto3,oneof" json:"delta_blob_offer_response_timeout_nanoseconds,omitempty"`
	DeltaBlobBroadcastGraceNanoseconds                      *uint64                       `protobuf:"varint,72,opt,name=delta_blob_broadcast_grace_nanoseconds,json=deltaBlobBroadcastGraceNanoseconds,proto3,oneof" json:"delta_blob_broadcast_grace_nanoseconds,omitempty"`
	DeltaBlobChunkMinRequestToSameOracleIntervalNanoseconds *uint64                       `protobuf:"varint,73,opt,name=delta_blob_chunk_min_request_to_same_oracle_interval_nanoseconds,json=deltaBlobChunkMinRequestToSameOracleIntervalNanoseconds,proto3,oneof" json:"delta_blob_chunk_min_request_to_same_oracle_interval_nanoseconds,omitempty"`
	DeltaBlobChunkResponseTimeoutNanoseconds                *uint64                       `protobuf:"varint,74,opt,name=delta_blob_chunk_response_timeout_nanoseconds,json=deltaBlobChunkResponseTimeoutNanoseconds,proto3,oneof" json:"delta_blob_chunk_response_timeout_nanoseconds,omitempty"`
	BlobChunkBytes                                          *uint32                       `protobuf:"varint,75,opt,name=blob_chunk_bytes,json=blobChunkBytes,proto3,oneof" json:"blob_chunk_bytes,omitempty"`
	RMax                                                    uint64                        `protobuf:"varint,76,opt,name=r_max,json=rMax,proto3" json:"r_max,omitempty"`
	S                                                       []uint32                      `protobuf:"varint,77,rep,packed,name=s,proto3" json:"s,omitempty"`
	OffchainPublicKeys                                      [][]byte                      `protobuf:"bytes,78,rep,name=offchain_public_keys,json=offchainPublicKeys,proto3" json:"offchain_public_keys,omitempty"`
	PeerIds                                                 []string                      `protobuf:"bytes,79,rep,name=peer_ids,json=peerIds,proto3" json:"peer_ids,omitempty"`
	ReportingPluginConfig                                   []byte                        `protobuf:"bytes,80,opt,name=reporting_plugin_config,json=reportingPluginConfig,proto3" json:"reporting_plugin_config,omitempty"`
	MaxDurationInitializationNanoseconds                    uint64                        `protobuf:"varint,81,opt,name=max_duration_initialization_nanoseconds,json=maxDurationInitializationNanoseconds,proto3" json:"max_duration_initialization_nanoseconds,omitempty"`
	WarnDurationQueryNanoseconds                            uint64                        `protobuf:"varint,82,opt,name=warn_duration_query_nanoseconds,json=warnDurationQueryNanoseconds,proto3" json:"warn_duration_query_nanoseconds,omitempty"`
	WarnDurationObservationNanoseconds                      uint64                        `protobuf:"varint,83,opt,name=warn_duration_observation_nanoseconds,json=warnDurationObservationNanoseconds,proto3" json:"warn_duration_observation_nanoseconds,omitempty"`
	WarnDurationValidateObservationNanoseconds              uint64                        `protobuf:"varint,84,opt,name=warn_duration_validate_observation_nanoseconds,json=warnDurationValidateObservationNanoseconds,proto3" json:"warn_duration_validate_observation_nanoseconds,omitempty"`
	WarnDurationObservationQuorumNanoseconds                uint64                        `protobuf:"varint,85,opt,name=warn_duration_observation_quorum_nanoseconds,json=warnDurationObservationQuorumNanoseconds,proto3" json:"warn_duration_observation_quorum_nanoseconds,omitempty"`
	WarnDurationStateTransitionNanoseconds                  uint64                        `protobuf:"varint,86,opt,name=warn_duration_state_transition_nanoseconds,json=warnDurationStateTransitionNanoseconds,proto3" json:"warn_duration_state_transition_nanoseconds,omitempty"`
	WarnDurationCommittedNanoseconds                        uint64                        `protobuf:"varint,87,opt,name=warn_duration_committed_nanoseconds,json=warnDurationCommittedNanoseconds,proto3" json:"warn_duration_committed_nanoseconds,omitempty"`
	MaxDurationShouldAcceptAttestedReportNanoseconds        uint64                        `protobuf:"varint,88,opt,name=max_duration_should_accept_attested_report_nanoseconds,json=maxDurationShouldAcceptAttestedReportNanoseconds,proto3" json:"max_duration_should_accept_attested_report_nanoseconds,omitempty"`
	MaxDurationShouldTransmitAcceptedReportNanoseconds      uint64                        `protobuf:"varint,89,opt,name=max_duration_should_transmit_accepted_report_nanoseconds,json=maxDurationShouldTransmitAcceptedReportNanoseconds,proto3" json:"max_duration_should_transmit_accepted_report_nanoseconds,omitempty"`
	SharedSecretEncryptions                                 *SharedSecretEncryptionsProto `protobuf:"bytes,90,opt,name=shared_secret_encryptions,json=sharedSecretEncryptions,proto3" json:"shared_secret_encryptions,omitempty"`
}

func (x *OffchainConfigProto) Reset() {
	*x = OffchainConfigProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_offchain_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffchainConfigProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffchainConfigProto) ProtoMessage() {}

func (x *OffchainConfigProto) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_offchain_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffchainConfigProto.ProtoReflect.Descriptor instead.
func (*OffchainConfigProto) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_offchain_config_proto_rawDescGZIP(), []int{0}
}

func (x *OffchainConfigProto) GetDeltaProgressNanoseconds() uint64 {
	if x != nil {
		return x.DeltaProgressNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaResendNanoseconds() uint64 {
	if x != nil && x.DeltaResendNanoseconds != nil {
		return *x.DeltaResendNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaInitialNanoseconds() uint64 {
	if x != nil && x.DeltaInitialNanoseconds != nil {
		return *x.DeltaInitialNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaRoundNanoseconds() uint64 {
	if x != nil {
		return x.DeltaRoundNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaGraceNanoseconds() uint64 {
	if x != nil {
		return x.DeltaGraceNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaReportsPlusPrecursorRequestNanoseconds() uint64 {
	if x != nil && x.DeltaReportsPlusPrecursorRequestNanoseconds != nil {
		return *x.DeltaReportsPlusPrecursorRequestNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaStageNanoseconds() uint64 {
	if x != nil {
		return x.DeltaStageNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaStateSyncSummaryIntervalNanoseconds() uint64 {
	if x != nil && x.DeltaStateSyncSummaryIntervalNanoseconds != nil {
		return *x.DeltaStateSyncSummaryIntervalNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlockSyncMinRequestToSameOracleIntervalNanoseconds() uint64 {
	if x != nil && x.DeltaBlockSyncMinRequestToSameOracleIntervalNanoseconds != nil {
		return *x.DeltaBlockSyncMinRequestToSameOracleIntervalNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlockSyncResponseTimeoutNanoseconds() uint64 {
	if x != nil && x.DeltaBlockSyncResponseTimeoutNanoseconds != nil {
		return *x.DeltaBlockSyncResponseTimeoutNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxBlocksPerBlockSyncResponse() uint32 {
	if x != nil && x.MaxBlocksPerBlockSyncResponse != nil {
		return *x.MaxBlocksPerBlockSyncResponse
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxParallelRequestedBlocks() uint64 {
	if x != nil && x.MaxParallelRequestedBlocks != nil {
		return *x.MaxParallelRequestedBlocks
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaTreeSyncMinRequestToSameOracleIntervalNanoseconds() uint64 {
	if x != nil && x.DeltaTreeSyncMinRequestToSameOracleIntervalNanoseconds != nil {
		return *x.DeltaTreeSyncMinRequestToSameOracleIntervalNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaTreeSyncResponseTimeoutNanoseconds() uint64 {
	if x != nil && x.DeltaTreeSyncResponseTimeoutNanoseconds != nil {
		return *x.DeltaTreeSyncResponseTimeoutNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxTreeSyncChunkKeys() uint32 {
	if x != nil && x.MaxTreeSyncChunkKeys != nil {
		return *x.MaxTreeSyncChunkKeys
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxTreeSyncChunkKeysPlusValuesBytes() uint32 {
	if x != nil && x.MaxTreeSyncChunkKeysPlusValuesBytes != nil {
		return *x.MaxTreeSyncChunkKeysPlusValuesBytes
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxParallelTreeSyncChunkFetches() uint32 {
	if x != nil && x.MaxParallelTreeSyncChunkFetches != nil {
		return *x.MaxParallelTreeSyncChunkFetches
	}
	return 0
}

func (x *OffchainConfigProto) GetSnapshotInterval() uint64 {
	if x != nil && x.SnapshotInterval != nil {
		return *x.SnapshotInterval
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxHistoricalSnapshotsRetained() uint64 {
	if x != nil && x.MaxHistoricalSnapshotsRetained != nil {
		return *x.MaxHistoricalSnapshotsRetained
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlobOfferMinRequestToSameOracleIntervalNanoseconds() uint64 {
	if x != nil && x.DeltaBlobOfferMinRequestToSameOracleIntervalNanoseconds != nil {
		return *x.DeltaBlobOfferMinRequestToSameOracleIntervalNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlobOfferResponseTimeoutNanoseconds() uint64 {
	if x != nil && x.DeltaBlobOfferResponseTimeoutNanoseconds != nil {
		return *x.DeltaBlobOfferResponseTimeoutNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlobBroadcastGraceNanoseconds() uint64 {
	if x != nil && x.DeltaBlobBroadcastGraceNanoseconds != nil {
		return *x.DeltaBlobBroadcastGraceNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlobChunkMinRequestToSameOracleIntervalNanoseconds() uint64 {
	if x != nil && x.DeltaBlobChunkMinRequestToSameOracleIntervalNanoseconds != nil {
		return *x.DeltaBlobChunkMinRequestToSameOracleIntervalNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetDeltaBlobChunkResponseTimeoutNanoseconds() uint64 {
	if x != nil && x.DeltaBlobChunkResponseTimeoutNanoseconds != nil {
		return *x.DeltaBlobChunkResponseTimeoutNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetBlobChunkBytes() uint32 {
	if x != nil && x.BlobChunkBytes != nil {
		return *x.BlobChunkBytes
	}
	return 0
}

func (x *OffchainConfigProto) GetRMax() uint64 {
	if x != nil {
		return x.RMax
	}
	return 0
}

func (x *OffchainConfigProto) GetS() []uint32 {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *OffchainConfigProto) GetOffchainPublicKeys() [][]byte {
	if x != nil {
		return x.OffchainPublicKeys
	}
	return nil
}

func (x *OffchainConfigProto) GetPeerIds() []string {
	if x != nil {
		return x.PeerIds
	}
	return nil
}

func (x *OffchainConfigProto) GetReportingPluginConfig() []byte {
	if x != nil {
		return x.ReportingPluginConfig
	}
	return nil
}

func (x *OffchainConfigProto) GetMaxDurationInitializationNanoseconds() uint64 {
	if x != nil {
		return x.MaxDurationInitializationNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetWarnDurationQueryNanoseconds() uint64 {
	if x != nil {
		return x.WarnDurationQueryNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetWarnDurationObservationNanoseconds() uint64 {
	if x != nil {
		return x.WarnDurationObservationNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetWarnDurationValidateObservationNanoseconds() uint64 {
	if x != nil {
		return x.WarnDurationValidateObservationNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetWarnDurationObservationQuorumNanoseconds() uint64 {
	if x != nil {
		return x.WarnDurationObservationQuorumNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetWarnDurationStateTransitionNanoseconds() uint64 {
	if x != nil {
		return x.WarnDurationStateTransitionNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetWarnDurationCommittedNanoseconds() uint64 {
	if x != nil {
		return x.WarnDurationCommittedNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxDurationShouldAcceptAttestedReportNanoseconds() uint64 {
	if x != nil {
		return x.MaxDurationShouldAcceptAttestedReportNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetMaxDurationShouldTransmitAcceptedReportNanoseconds() uint64 {
	if x != nil {
		return x.MaxDurationShouldTransmitAcceptedReportNanoseconds
	}
	return 0
}

func (x *OffchainConfigProto) GetSharedSecretEncryptions() *SharedSecretEncryptionsProto {
	if x != nil {
		return x.SharedSecretEncryptions
	}
	return nil
}

type SharedSecretEncryptionsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffieHellmanPoint []byte   `protobuf:"bytes,1,opt,name=diffieHellmanPoint,proto3" json:"diffieHellmanPoint,omitempty"`
	SharedSecretHash   []byte   `protobuf:"bytes,2,opt,name=sharedSecretHash,proto3" json:"sharedSecretHash,omitempty"`
	Encryptions        [][]byte `protobuf:"bytes,3,rep,name=encryptions,proto3" json:"encryptions,omitempty"`
}

func (x *SharedSecretEncryptionsProto) Reset() {
	*x = SharedSecretEncryptionsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_offchain_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedSecretEncryptionsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedSecretEncryptionsProto) ProtoMessage() {}

func (x *SharedSecretEncryptionsProto) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_offchain_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedSecretEncryptionsProto.ProtoReflect.Descriptor instead.
func (*SharedSecretEncryptionsProto) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_offchain_config_proto_rawDescGZIP(), []int{1}
}

func (x *SharedSecretEncryptionsProto) GetDiffieHellmanPoint() []byte {
	if x != nil {
		return x.DiffieHellmanPoint
	}
	return nil
}

func (x *SharedSecretEncryptionsProto) GetSharedSecretHash() []byte {
	if x != nil {
		return x.SharedSecretHash
	}
	return nil
}

func (x *SharedSecretEncryptionsProto) GetEncryptions() [][]byte {
	if x != nil {
		return x.Encryptions
	}
	return nil
}

var File_offchainreporting3_1_offchain_config_proto protoreflect.FileDescriptor

var file_offchainreporting3_1_offchain_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33,
	0x5f, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbf, 0x21, 0x0a, 0x13, 0x4f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x19, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x47,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x6a, 0x0a, 0x30, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x2b, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x28, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x40, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61,
	0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x37, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x28, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x07, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x84, 0x01, 0x0a, 0x3f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x36, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x2c, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x48, 0x09, 0x52,
	0x27, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x18, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x4b, 0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x2a, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x23,
	0x6d, 0x61, 0x78, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4b, 0x65, 0x79, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0d, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0e, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a,
	0x40, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0f, 0x52, 0x37, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x48, 0x10, 0x52, 0x28,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x26, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x48, 0x11, 0x52, 0x22, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x40, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x12, 0x52, 0x37, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x61, 0x6d,
	0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a,
	0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x13, 0x52, 0x28, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x14, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x4d, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x01, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x4e, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x4f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x27, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x52, 0x24, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x45, 0x0a, 0x1f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x77, 0x61, 0x72, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x77, 0x61, 0x72, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x2e, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x2a, 0x77, 0x61, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x5e, 0x0a, 0x2c, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x04, 0x52, 0x28, 0x77, 0x61, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x5a, 0x0a, 0x2a, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x56, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x26, 0x77, 0x61, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x70, 0x0a, 0x36, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x04, 0x52, 0x30, 0x6d, 0x61, 0x78, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x38,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x04, 0x52, 0x32,
	0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x75, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x42, 0x33, 0x0a, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x43, 0x0a, 0x41, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x42, 0x0a, 0x40, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42,
	0x2f, 0x0a, 0x2d, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x2d, 0x0a,
	0x2b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x27, 0x0a, 0x25,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x24, 0x0a, 0x22, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x42, 0x43, 0x0a, 0x41, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x42, 0x43, 0x0a, 0x41, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x2b, 0x4a, 0x04, 0x08, 0x2b, 0x10, 0x33, 0x22, 0x9c, 0x01, 0x0a, 0x1c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x12,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
	0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b,
	0x6f, 0x63, 0x72, 0x33, 0x5f, 0x31, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_offchainreporting3_1_offchain_config_proto_rawDescOnce sync.Once
	file_offchainreporting3_1_offchain_config_proto_rawDescData = file_offchainreporting3_1_offchain_config_proto_rawDesc
)

func file_offchainreporting3_1_offchain_config_proto_rawDescGZIP() []byte {
	file_offchainreporting3_1_offchain_config_proto_rawDescOnce.Do(func() {
		file_offchainreporting3_1_offchain_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_offchainreporting3_1_offchain_config_proto_rawDescData)
	})
	return file_offchainreporting3_1_offchain_config_proto_rawDescData
}

var file_offchainreporting3_1_offchain_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_offchainreporting3_1_offchain_config_proto_goTypes = []interface{}{
	(*OffchainConfigProto)(nil),          // 0: offchainreporting3_1_config.OffchainConfigProto
	(*SharedSecretEncryptionsProto)(nil), // 1: offchainreporting3_1_config.SharedSecretEncryptionsProto
}
var file_offchainreporting3_1_offchain_config_proto_depIdxs = []int32{
	1, // 0: offchainreporting3_1_config.OffchainConfigProto.shared_secret_encryptions:type_name -> offchainreporting3_1_config.SharedSecretEncryptionsProto
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_offchainreporting3_1_offchain_config_proto_init() }
func file_offchainreporting3_1_offchain_config_proto_init() {
	if File_offchainreporting3_1_offchain_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offchainreporting3_1_offchain_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffchainConfigProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_offchain_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedSecretEncryptionsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_offchainreporting3_1_offchain_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offchainreporting3_1_offchain_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_offchainreporting3_1_offchain_config_proto_goTypes,
		DependencyIndexes: file_offchainreporting3_1_offchain_config_proto_depIdxs,
		MessageInfos:      file_offchainreporting3_1_offchain_config_proto_msgTypes,
	}.Build()
	File_offchainreporting3_1_offchain_config_proto = out.File
	file_offchainreporting3_1_offchain_config_proto_rawDesc = nil
	file_offchainreporting3_1_offchain_config_proto_goTypes = nil
	file_offchainreporting3_1_offchain_config_proto_depIdxs = nil
}
