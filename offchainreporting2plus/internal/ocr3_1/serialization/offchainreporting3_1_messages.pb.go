// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: offchainreporting3_1_messages.proto

package serialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*MessageWrapper_MessageNewEpochWish
	//	*MessageWrapper_MessageEpochStartRequest
	//	*MessageWrapper_MessageEpochStart
	//	*MessageWrapper_MessageRoundStart
	//	*MessageWrapper_MessageObservation
	//	*MessageWrapper_MessageProposal
	//	*MessageWrapper_MessagePrepare
	//	*MessageWrapper_MessageCommit
	//	*MessageWrapper_MessageReportSignatures
	//	*MessageWrapper_MessageReportsPlusPrecursorRequest
	//	*MessageWrapper_MessageReportsPlusPrecursor
	//	*MessageWrapper_MessageBlockSyncRequest
	//	*MessageWrapper_MessageBlockSyncResponse
	//	*MessageWrapper_MessageStateSyncSummary
	//	*MessageWrapper_MessageTreeSyncChunkRequest
	//	*MessageWrapper_MessageTreeSyncChunkResponse
	//	*MessageWrapper_MessageBlobOffer
	//	*MessageWrapper_MessageBlobOfferResponse
	//	*MessageWrapper_MessageBlobChunkRequest
	//	*MessageWrapper_MessageBlobChunkResponse
	Msg isMessageWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{0}
}

func (m *MessageWrapper) GetMsg() isMessageWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MessageWrapper) GetMessageNewEpochWish() *MessageNewEpochWish {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageNewEpochWish); ok {
		return x.MessageNewEpochWish
	}
	return nil
}

func (x *MessageWrapper) GetMessageEpochStartRequest() *MessageEpochStartRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageEpochStartRequest); ok {
		return x.MessageEpochStartRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageEpochStart() *MessageEpochStart {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageEpochStart); ok {
		return x.MessageEpochStart
	}
	return nil
}

func (x *MessageWrapper) GetMessageRoundStart() *MessageRoundStart {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageRoundStart); ok {
		return x.MessageRoundStart
	}
	return nil
}

func (x *MessageWrapper) GetMessageObservation() *MessageObservation {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageObservation); ok {
		return x.MessageObservation
	}
	return nil
}

func (x *MessageWrapper) GetMessageProposal() *MessageProposal {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageProposal); ok {
		return x.MessageProposal
	}
	return nil
}

func (x *MessageWrapper) GetMessagePrepare() *MessagePrepare {
	if x, ok := x.GetMsg().(*MessageWrapper_MessagePrepare); ok {
		return x.MessagePrepare
	}
	return nil
}

func (x *MessageWrapper) GetMessageCommit() *MessageCommit {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageCommit); ok {
		return x.MessageCommit
	}
	return nil
}

func (x *MessageWrapper) GetMessageReportSignatures() *MessageReportSignatures {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageReportSignatures); ok {
		return x.MessageReportSignatures
	}
	return nil
}

func (x *MessageWrapper) GetMessageReportsPlusPrecursorRequest() *MessageReportsPlusPrecursorRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageReportsPlusPrecursorRequest); ok {
		return x.MessageReportsPlusPrecursorRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageReportsPlusPrecursor() *MessageReportsPlusPrecursor {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageReportsPlusPrecursor); ok {
		return x.MessageReportsPlusPrecursor
	}
	return nil
}

func (x *MessageWrapper) GetMessageBlockSyncRequest() *MessageBlockSyncRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageBlockSyncRequest); ok {
		return x.MessageBlockSyncRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageBlockSyncResponse() *MessageBlockSyncResponse {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageBlockSyncResponse); ok {
		return x.MessageBlockSyncResponse
	}
	return nil
}

func (x *MessageWrapper) GetMessageStateSyncSummary() *MessageStateSyncSummary {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageStateSyncSummary); ok {
		return x.MessageStateSyncSummary
	}
	return nil
}

func (x *MessageWrapper) GetMessageTreeSyncChunkRequest() *MessageTreeSyncChunkRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageTreeSyncChunkRequest); ok {
		return x.MessageTreeSyncChunkRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageTreeSyncChunkResponse() *MessageTreeSyncChunkResponse {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageTreeSyncChunkResponse); ok {
		return x.MessageTreeSyncChunkResponse
	}
	return nil
}

func (x *MessageWrapper) GetMessageBlobOffer() *MessageBlobOffer {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageBlobOffer); ok {
		return x.MessageBlobOffer
	}
	return nil
}

func (x *MessageWrapper) GetMessageBlobOfferResponse() *MessageBlobOfferResponse {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageBlobOfferResponse); ok {
		return x.MessageBlobOfferResponse
	}
	return nil
}

func (x *MessageWrapper) GetMessageBlobChunkRequest() *MessageBlobChunkRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageBlobChunkRequest); ok {
		return x.MessageBlobChunkRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageBlobChunkResponse() *MessageBlobChunkResponse {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageBlobChunkResponse); ok {
		return x.MessageBlobChunkResponse
	}
	return nil
}

type isMessageWrapper_Msg interface {
	isMessageWrapper_Msg()
}

type MessageWrapper_MessageNewEpochWish struct {
	MessageNewEpochWish *MessageNewEpochWish `protobuf:"bytes,35,opt,name=message_new_epoch_wish,json=messageNewEpochWish,proto3,oneof"`
}

type MessageWrapper_MessageEpochStartRequest struct {
	MessageEpochStartRequest *MessageEpochStartRequest `protobuf:"bytes,36,opt,name=message_epoch_start_request,json=messageEpochStartRequest,proto3,oneof"`
}

type MessageWrapper_MessageEpochStart struct {
	MessageEpochStart *MessageEpochStart `protobuf:"bytes,37,opt,name=message_epoch_start,json=messageEpochStart,proto3,oneof"`
}

type MessageWrapper_MessageRoundStart struct {
	MessageRoundStart *MessageRoundStart `protobuf:"bytes,38,opt,name=message_round_start,json=messageRoundStart,proto3,oneof"`
}

type MessageWrapper_MessageObservation struct {
	MessageObservation *MessageObservation `protobuf:"bytes,39,opt,name=message_observation,json=messageObservation,proto3,oneof"`
}

type MessageWrapper_MessageProposal struct {
	MessageProposal *MessageProposal `protobuf:"bytes,40,opt,name=message_proposal,json=messageProposal,proto3,oneof"`
}

type MessageWrapper_MessagePrepare struct {
	MessagePrepare *MessagePrepare `protobuf:"bytes,41,opt,name=message_prepare,json=messagePrepare,proto3,oneof"`
}

type MessageWrapper_MessageCommit struct {
	MessageCommit *MessageCommit `protobuf:"bytes,42,opt,name=message_commit,json=messageCommit,proto3,oneof"`
}

type MessageWrapper_MessageReportSignatures struct {
	MessageReportSignatures *MessageReportSignatures `protobuf:"bytes,43,opt,name=message_report_signatures,json=messageReportSignatures,proto3,oneof"`
}

type MessageWrapper_MessageReportsPlusPrecursorRequest struct {
	MessageReportsPlusPrecursorRequest *MessageReportsPlusPrecursorRequest `protobuf:"bytes,44,opt,name=message_reports_plus_precursor_request,json=messageReportsPlusPrecursorRequest,proto3,oneof"`
}

type MessageWrapper_MessageReportsPlusPrecursor struct {
	MessageReportsPlusPrecursor *MessageReportsPlusPrecursor `protobuf:"bytes,45,opt,name=message_reports_plus_precursor,json=messageReportsPlusPrecursor,proto3,oneof"`
}

type MessageWrapper_MessageBlockSyncRequest struct {
	MessageBlockSyncRequest *MessageBlockSyncRequest `protobuf:"bytes,46,opt,name=message_block_sync_request,json=messageBlockSyncRequest,proto3,oneof"`
}

type MessageWrapper_MessageBlockSyncResponse struct {
	MessageBlockSyncResponse *MessageBlockSyncResponse `protobuf:"bytes,47,opt,name=message_block_sync_response,json=messageBlockSyncResponse,proto3,oneof"`
}

type MessageWrapper_MessageStateSyncSummary struct {
	MessageStateSyncSummary *MessageStateSyncSummary `protobuf:"bytes,48,opt,name=message_state_sync_summary,json=messageStateSyncSummary,proto3,oneof"`
}

type MessageWrapper_MessageTreeSyncChunkRequest struct {
	MessageTreeSyncChunkRequest *MessageTreeSyncChunkRequest `protobuf:"bytes,49,opt,name=message_tree_sync_chunk_request,json=messageTreeSyncChunkRequest,proto3,oneof"`
}

type MessageWrapper_MessageTreeSyncChunkResponse struct {
	MessageTreeSyncChunkResponse *MessageTreeSyncChunkResponse `protobuf:"bytes,50,opt,name=message_tree_sync_chunk_response,json=messageTreeSyncChunkResponse,proto3,oneof"`
}

type MessageWrapper_MessageBlobOffer struct {
	MessageBlobOffer *MessageBlobOffer `protobuf:"bytes,51,opt,name=message_blob_offer,json=messageBlobOffer,proto3,oneof"`
}

type MessageWrapper_MessageBlobOfferResponse struct {
	MessageBlobOfferResponse *MessageBlobOfferResponse `protobuf:"bytes,52,opt,name=message_blob_offer_response,json=messageBlobOfferResponse,proto3,oneof"`
}

type MessageWrapper_MessageBlobChunkRequest struct {
	MessageBlobChunkRequest *MessageBlobChunkRequest `protobuf:"bytes,53,opt,name=message_blob_chunk_request,json=messageBlobChunkRequest,proto3,oneof"`
}

type MessageWrapper_MessageBlobChunkResponse struct {
	MessageBlobChunkResponse *MessageBlobChunkResponse `protobuf:"bytes,54,opt,name=message_blob_chunk_response,json=messageBlobChunkResponse,proto3,oneof"`
}

func (*MessageWrapper_MessageNewEpochWish) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageEpochStartRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageEpochStart) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageRoundStart) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageObservation) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageProposal) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessagePrepare) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageCommit) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageReportSignatures) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageReportsPlusPrecursorRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageReportsPlusPrecursor) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageBlockSyncRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageBlockSyncResponse) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageStateSyncSummary) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageTreeSyncChunkRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageTreeSyncChunkResponse) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageBlobOffer) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageBlobOfferResponse) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageBlobChunkRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageBlobChunkResponse) isMessageWrapper_Msg() {}

type MessageNewEpochWish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *MessageNewEpochWish) Reset() {
	*x = MessageNewEpochWish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNewEpochWish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNewEpochWish) ProtoMessage() {}

func (x *MessageNewEpochWish) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNewEpochWish.ProtoReflect.Descriptor instead.
func (*MessageNewEpochWish) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{1}
}

func (x *MessageNewEpochWish) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type MessageEpochStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                           uint64                           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	HighestCertified                *CertifiedPrepareOrCommit        `protobuf:"bytes,2,opt,name=highest_certified,json=highestCertified,proto3" json:"highest_certified,omitempty"`
	SignedHighestCertifiedTimestamp *SignedHighestCertifiedTimestamp `protobuf:"bytes,3,opt,name=signed_highest_certified_timestamp,json=signedHighestCertifiedTimestamp,proto3" json:"signed_highest_certified_timestamp,omitempty"`
}

func (x *MessageEpochStartRequest) Reset() {
	*x = MessageEpochStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEpochStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEpochStartRequest) ProtoMessage() {}

func (x *MessageEpochStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEpochStartRequest.ProtoReflect.Descriptor instead.
func (*MessageEpochStartRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{2}
}

func (x *MessageEpochStartRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageEpochStartRequest) GetHighestCertified() *CertifiedPrepareOrCommit {
	if x != nil {
		return x.HighestCertified
	}
	return nil
}

func (x *MessageEpochStartRequest) GetSignedHighestCertifiedTimestamp() *SignedHighestCertifiedTimestamp {
	if x != nil {
		return x.SignedHighestCertifiedTimestamp
	}
	return nil
}

type MessageEpochStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch           uint64           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	EpochStartProof *EpochStartProof `protobuf:"bytes,2,opt,name=epoch_start_proof,json=epochStartProof,proto3" json:"epoch_start_proof,omitempty"`
	Abdicate        bool             `protobuf:"varint,3,opt,name=abdicate,proto3" json:"abdicate,omitempty"`
}

func (x *MessageEpochStart) Reset() {
	*x = MessageEpochStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEpochStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEpochStart) ProtoMessage() {}

func (x *MessageEpochStart) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEpochStart.ProtoReflect.Descriptor instead.
func (*MessageEpochStart) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{3}
}

func (x *MessageEpochStart) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageEpochStart) GetEpochStartProof() *EpochStartProof {
	if x != nil {
		return x.EpochStartProof
	}
	return nil
}

func (x *MessageEpochStart) GetAbdicate() bool {
	if x != nil {
		return x.Abdicate
	}
	return false
}

type MessageRoundStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Query []byte `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *MessageRoundStart) Reset() {
	*x = MessageRoundStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRoundStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRoundStart) ProtoMessage() {}

func (x *MessageRoundStart) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRoundStart.ProtoReflect.Descriptor instead.
func (*MessageRoundStart) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{4}
}

func (x *MessageRoundStart) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageRoundStart) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageRoundStart) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type MessageObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr             uint64             `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	SignedObservation *SignedObservation `protobuf:"bytes,3,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
}

func (x *MessageObservation) Reset() {
	*x = MessageObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageObservation) ProtoMessage() {}

func (x *MessageObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageObservation.ProtoReflect.Descriptor instead.
func (*MessageObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{5}
}

func (x *MessageObservation) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageObservation) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageObservation) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

type MessageProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                        uint64                         `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr                        uint64                         `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	AttributedSignedObservations []*AttributedSignedObservation `protobuf:"bytes,3,rep,name=attributed_signed_observations,json=attributedSignedObservations,proto3" json:"attributed_signed_observations,omitempty"`
}

func (x *MessageProposal) Reset() {
	*x = MessageProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageProposal) ProtoMessage() {}

func (x *MessageProposal) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageProposal.ProtoReflect.Descriptor instead.
func (*MessageProposal) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MessageProposal) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageProposal) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageProposal) GetAttributedSignedObservations() []*AttributedSignedObservation {
	if x != nil {
		return x.AttributedSignedObservations
	}
	return nil
}

type MessagePrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr     uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessagePrepare) Reset() {
	*x = MessagePrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePrepare) ProtoMessage() {}

func (x *MessagePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePrepare.ProtoReflect.Descriptor instead.
func (*MessagePrepare) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{7}
}

func (x *MessagePrepare) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessagePrepare) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessagePrepare) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MessageCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr     uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessageCommit) Reset() {
	*x = MessageCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCommit) ProtoMessage() {}

func (x *MessageCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCommit.ProtoReflect.Descriptor instead.
func (*MessageCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{8}
}

func (x *MessageCommit) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageCommit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MessageReportSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr                      uint64   `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	ReportSignatures           [][]byte `protobuf:"bytes,2,rep,name=report_signatures,json=reportSignatures,proto3" json:"report_signatures,omitempty"`
	ReportsPlusPrecursorDigest []byte   `protobuf:"bytes,3,opt,name=reports_plus_precursor_digest,json=reportsPlusPrecursorDigest,proto3" json:"reports_plus_precursor_digest,omitempty"`
}

func (x *MessageReportSignatures) Reset() {
	*x = MessageReportSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReportSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReportSignatures) ProtoMessage() {}

func (x *MessageReportSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReportSignatures.ProtoReflect.Descriptor instead.
func (*MessageReportSignatures) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{9}
}

func (x *MessageReportSignatures) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageReportSignatures) GetReportSignatures() [][]byte {
	if x != nil {
		return x.ReportSignatures
	}
	return nil
}

func (x *MessageReportSignatures) GetReportsPlusPrecursorDigest() []byte {
	if x != nil {
		return x.ReportsPlusPrecursorDigest
	}
	return nil
}

type MessageReportsPlusPrecursorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
}

func (x *MessageReportsPlusPrecursorRequest) Reset() {
	*x = MessageReportsPlusPrecursorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReportsPlusPrecursorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReportsPlusPrecursorRequest) ProtoMessage() {}

func (x *MessageReportsPlusPrecursorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReportsPlusPrecursorRequest.ProtoReflect.Descriptor instead.
func (*MessageReportsPlusPrecursorRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{10}
}

func (x *MessageReportsPlusPrecursorRequest) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

type MessageReportsPlusPrecursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr                uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	ReportsPlusPrecursor []byte `protobuf:"bytes,2,opt,name=reports_plus_precursor,json=reportsPlusPrecursor,proto3" json:"reports_plus_precursor,omitempty"`
}

func (x *MessageReportsPlusPrecursor) Reset() {
	*x = MessageReportsPlusPrecursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReportsPlusPrecursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReportsPlusPrecursor) ProtoMessage() {}

func (x *MessageReportsPlusPrecursor) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReportsPlusPrecursor.ProtoReflect.Descriptor instead.
func (*MessageReportsPlusPrecursor) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{11}
}

func (x *MessageReportsPlusPrecursor) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageReportsPlusPrecursor) GetReportsPlusPrecursor() []byte {
	if x != nil {
		return x.ReportsPlusPrecursor
	}
	return nil
}

type MessageBlockSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartSeqNr   uint64 `protobuf:"varint,1,opt,name=start_seq_nr,json=startSeqNr,proto3" json:"start_seq_nr,omitempty"`
	EndExclSeqNr uint64 `protobuf:"varint,2,opt,name=end_excl_seq_nr,json=endExclSeqNr,proto3" json:"end_excl_seq_nr,omitempty"`
}

func (x *MessageBlockSyncRequest) Reset() {
	*x = MessageBlockSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBlockSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBlockSyncRequest) ProtoMessage() {}

func (x *MessageBlockSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBlockSyncRequest.ProtoReflect.Descriptor instead.
func (*MessageBlockSyncRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{12}
}

func (x *MessageBlockSyncRequest) GetStartSeqNr() uint64 {
	if x != nil {
		return x.StartSeqNr
	}
	return 0
}

func (x *MessageBlockSyncRequest) GetEndExclSeqNr() uint64 {
	if x != nil {
		return x.EndExclSeqNr
	}
	return 0
}

type MessageBlockSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestStartSeqNr             uint64                          `protobuf:"varint,1,opt,name=request_start_seq_nr,json=requestStartSeqNr,proto3" json:"request_start_seq_nr,omitempty"`
	RequestEndExclSeqNr           uint64                          `protobuf:"varint,2,opt,name=request_end_excl_seq_nr,json=requestEndExclSeqNr,proto3" json:"request_end_excl_seq_nr,omitempty"`
	AttestedStateTransitionBlocks []*AttestedStateTransitionBlock `protobuf:"bytes,3,rep,name=attested_state_transition_blocks,json=attestedStateTransitionBlocks,proto3" json:"attested_state_transition_blocks,omitempty"`
}

func (x *MessageBlockSyncResponse) Reset() {
	*x = MessageBlockSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBlockSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBlockSyncResponse) ProtoMessage() {}

func (x *MessageBlockSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBlockSyncResponse.ProtoReflect.Descriptor instead.
func (*MessageBlockSyncResponse) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{13}
}

func (x *MessageBlockSyncResponse) GetRequestStartSeqNr() uint64 {
	if x != nil {
		return x.RequestStartSeqNr
	}
	return 0
}

func (x *MessageBlockSyncResponse) GetRequestEndExclSeqNr() uint64 {
	if x != nil {
		return x.RequestEndExclSeqNr
	}
	return 0
}

func (x *MessageBlockSyncResponse) GetAttestedStateTransitionBlocks() []*AttestedStateTransitionBlock {
	if x != nil {
		return x.AttestedStateTransitionBlocks
	}
	return nil
}

type MessageStateSyncSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowestPersistedSeqNr  uint64 `protobuf:"varint,1,opt,name=lowest_persisted_seq_nr,json=lowestPersistedSeqNr,proto3" json:"lowest_persisted_seq_nr,omitempty"`
	HighestCommittedSeqNr uint64 `protobuf:"varint,2,opt,name=highest_committed_seq_nr,json=highestCommittedSeqNr,proto3" json:"highest_committed_seq_nr,omitempty"`
}

func (x *MessageStateSyncSummary) Reset() {
	*x = MessageStateSyncSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStateSyncSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStateSyncSummary) ProtoMessage() {}

func (x *MessageStateSyncSummary) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStateSyncSummary.ProtoReflect.Descriptor instead.
func (*MessageStateSyncSummary) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{14}
}

func (x *MessageStateSyncSummary) GetLowestPersistedSeqNr() uint64 {
	if x != nil {
		return x.LowestPersistedSeqNr
	}
	return 0
}

func (x *MessageStateSyncSummary) GetHighestCommittedSeqNr() uint64 {
	if x != nil {
		return x.HighestCommittedSeqNr
	}
	return 0
}

type MessageTreeSyncChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToSeqNr      uint64 `protobuf:"varint,1,opt,name=to_seq_nr,json=toSeqNr,proto3" json:"to_seq_nr,omitempty"`
	StartIndex   []byte `protobuf:"bytes,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndInclIndex []byte `protobuf:"bytes,3,opt,name=end_incl_index,json=endInclIndex,proto3" json:"end_incl_index,omitempty"`
}

func (x *MessageTreeSyncChunkRequest) Reset() {
	*x = MessageTreeSyncChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTreeSyncChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTreeSyncChunkRequest) ProtoMessage() {}

func (x *MessageTreeSyncChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTreeSyncChunkRequest.ProtoReflect.Descriptor instead.
func (*MessageTreeSyncChunkRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{15}
}

func (x *MessageTreeSyncChunkRequest) GetToSeqNr() uint64 {
	if x != nil {
		return x.ToSeqNr
	}
	return 0
}

func (x *MessageTreeSyncChunkRequest) GetStartIndex() []byte {
	if x != nil {
		return x.StartIndex
	}
	return nil
}

func (x *MessageTreeSyncChunkRequest) GetEndInclIndex() []byte {
	if x != nil {
		return x.EndInclIndex
	}
	return nil
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{16}
}

func (x *KeyValuePair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type LeafKeyAndValueDigests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyDigest   []byte `protobuf:"bytes,1,opt,name=key_digest,json=keyDigest,proto3" json:"key_digest,omitempty"`
	ValueDigest []byte `protobuf:"bytes,2,opt,name=value_digest,json=valueDigest,proto3" json:"value_digest,omitempty"`
}

func (x *LeafKeyAndValueDigests) Reset() {
	*x = LeafKeyAndValueDigests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeafKeyAndValueDigests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeafKeyAndValueDigests) ProtoMessage() {}

func (x *LeafKeyAndValueDigests) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeafKeyAndValueDigests.ProtoReflect.Descriptor instead.
func (*LeafKeyAndValueDigests) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{17}
}

func (x *LeafKeyAndValueDigests) GetKeyDigest() []byte {
	if x != nil {
		return x.KeyDigest
	}
	return nil
}

func (x *LeafKeyAndValueDigests) GetValueDigest() []byte {
	if x != nil {
		return x.ValueDigest
	}
	return nil
}

type BoundingLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaf     *LeafKeyAndValueDigests `protobuf:"bytes,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Siblings [][]byte                `protobuf:"bytes,2,rep,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *BoundingLeaf) Reset() {
	*x = BoundingLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingLeaf) ProtoMessage() {}

func (x *BoundingLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingLeaf.ProtoReflect.Descriptor instead.
func (*BoundingLeaf) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{18}
}

func (x *BoundingLeaf) GetLeaf() *LeafKeyAndValueDigests {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *BoundingLeaf) GetSiblings() [][]byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type MessageTreeSyncChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToSeqNr             uint64          `protobuf:"varint,1,opt,name=to_seq_nr,json=toSeqNr,proto3" json:"to_seq_nr,omitempty"`
	StartIndex          []byte          `protobuf:"bytes,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	RequestEndInclIndex []byte          `protobuf:"bytes,3,opt,name=request_end_incl_index,json=requestEndInclIndex,proto3" json:"request_end_incl_index,omitempty"`
	GoAway              bool            `protobuf:"varint,4,opt,name=go_away,json=goAway,proto3" json:"go_away,omitempty"`
	EndInclIndex        []byte          `protobuf:"bytes,5,opt,name=end_incl_index,json=endInclIndex,proto3" json:"end_incl_index,omitempty"`
	KeyValues           []*KeyValuePair `protobuf:"bytes,6,rep,name=key_values,json=keyValues,proto3" json:"key_values,omitempty"`
	BoundingLeaves      []*BoundingLeaf `protobuf:"bytes,7,rep,name=bounding_leaves,json=boundingLeaves,proto3" json:"bounding_leaves,omitempty"`
}

func (x *MessageTreeSyncChunkResponse) Reset() {
	*x = MessageTreeSyncChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTreeSyncChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTreeSyncChunkResponse) ProtoMessage() {}

func (x *MessageTreeSyncChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTreeSyncChunkResponse.ProtoReflect.Descriptor instead.
func (*MessageTreeSyncChunkResponse) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{19}
}

func (x *MessageTreeSyncChunkResponse) GetToSeqNr() uint64 {
	if x != nil {
		return x.ToSeqNr
	}
	return 0
}

func (x *MessageTreeSyncChunkResponse) GetStartIndex() []byte {
	if x != nil {
		return x.StartIndex
	}
	return nil
}

func (x *MessageTreeSyncChunkResponse) GetRequestEndInclIndex() []byte {
	if x != nil {
		return x.RequestEndInclIndex
	}
	return nil
}

func (x *MessageTreeSyncChunkResponse) GetGoAway() bool {
	if x != nil {
		return x.GoAway
	}
	return false
}

func (x *MessageTreeSyncChunkResponse) GetEndInclIndex() []byte {
	if x != nil {
		return x.EndInclIndex
	}
	return nil
}

func (x *MessageTreeSyncChunkResponse) GetKeyValues() []*KeyValuePair {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

func (x *MessageTreeSyncChunkResponse) GetBoundingLeaves() []*BoundingLeaf {
	if x != nil {
		return x.BoundingLeaves
	}
	return nil
}

type EpochStartProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestCertified      *CertifiedPrepareOrCommit                    `protobuf:"bytes,1,opt,name=highest_certified,json=highestCertified,proto3" json:"highest_certified,omitempty"`
	HighestCertifiedProof []*AttributedSignedHighestCertifiedTimestamp `protobuf:"bytes,2,rep,name=highest_certified_proof,json=highestCertifiedProof,proto3" json:"highest_certified_proof,omitempty"`
}

func (x *EpochStartProof) Reset() {
	*x = EpochStartProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochStartProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochStartProof) ProtoMessage() {}

func (x *EpochStartProof) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochStartProof.ProtoReflect.Descriptor instead.
func (*EpochStartProof) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{20}
}

func (x *EpochStartProof) GetHighestCertified() *CertifiedPrepareOrCommit {
	if x != nil {
		return x.HighestCertified
	}
	return nil
}

func (x *EpochStartProof) GetHighestCertifiedProof() []*AttributedSignedHighestCertifiedTimestamp {
	if x != nil {
		return x.HighestCertifiedProof
	}
	return nil
}

type CertifiedPrepareOrCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PrepareOrCommit:
	//
	//	*CertifiedPrepareOrCommit_Prepare
	//	*CertifiedPrepareOrCommit_Commit
	PrepareOrCommit isCertifiedPrepareOrCommit_PrepareOrCommit `protobuf_oneof:"prepare_or_commit"`
}

func (x *CertifiedPrepareOrCommit) Reset() {
	*x = CertifiedPrepareOrCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepareOrCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepareOrCommit) ProtoMessage() {}

func (x *CertifiedPrepareOrCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepareOrCommit.ProtoReflect.Descriptor instead.
func (*CertifiedPrepareOrCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{21}
}

func (m *CertifiedPrepareOrCommit) GetPrepareOrCommit() isCertifiedPrepareOrCommit_PrepareOrCommit {
	if m != nil {
		return m.PrepareOrCommit
	}
	return nil
}

func (x *CertifiedPrepareOrCommit) GetPrepare() *CertifiedPrepare {
	if x, ok := x.GetPrepareOrCommit().(*CertifiedPrepareOrCommit_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *CertifiedPrepareOrCommit) GetCommit() *CertifiedCommit {
	if x, ok := x.GetPrepareOrCommit().(*CertifiedPrepareOrCommit_Commit); ok {
		return x.Commit
	}
	return nil
}

type isCertifiedPrepareOrCommit_PrepareOrCommit interface {
	isCertifiedPrepareOrCommit_PrepareOrCommit()
}

type CertifiedPrepareOrCommit_Prepare struct {
	Prepare *CertifiedPrepare `protobuf:"bytes,1,opt,name=prepare,proto3,oneof"`
}

type CertifiedPrepareOrCommit_Commit struct {
	Commit *CertifiedCommit `protobuf:"bytes,2,opt,name=commit,proto3,oneof"`
}

func (*CertifiedPrepareOrCommit_Prepare) isCertifiedPrepareOrCommit_PrepareOrCommit() {}

func (*CertifiedPrepareOrCommit_Commit) isCertifiedPrepareOrCommit_PrepareOrCommit() {}

type CertifiedPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                        uint64                        `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr                        uint64                        `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	StateTransitionInputsDigest  []byte                        `protobuf:"bytes,3,opt,name=state_transition_inputs_digest,json=stateTransitionInputsDigest,proto3" json:"state_transition_inputs_digest,omitempty"`
	StateTransitionOutputsDigest []byte                        `protobuf:"bytes,4,opt,name=state_transition_outputs_digest,json=stateTransitionOutputsDigest,proto3" json:"state_transition_outputs_digest,omitempty"`
	StateRootDigest              []byte                        `protobuf:"bytes,5,opt,name=state_root_digest,json=stateRootDigest,proto3" json:"state_root_digest,omitempty"`
	ReportsPlusPrecursorDigest   []byte                        `protobuf:"bytes,6,opt,name=reports_plus_precursor_digest,json=reportsPlusPrecursorDigest,proto3" json:"reports_plus_precursor_digest,omitempty"`
	PrepareQuorumCertificate     []*AttributedPrepareSignature `protobuf:"bytes,7,rep,name=prepare_quorum_certificate,json=prepareQuorumCertificate,proto3" json:"prepare_quorum_certificate,omitempty"`
}

func (x *CertifiedPrepare) Reset() {
	*x = CertifiedPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepare) ProtoMessage() {}

func (x *CertifiedPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepare.ProtoReflect.Descriptor instead.
func (*CertifiedPrepare) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{22}
}

func (x *CertifiedPrepare) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CertifiedPrepare) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *CertifiedPrepare) GetStateTransitionInputsDigest() []byte {
	if x != nil {
		return x.StateTransitionInputsDigest
	}
	return nil
}

func (x *CertifiedPrepare) GetStateTransitionOutputsDigest() []byte {
	if x != nil {
		return x.StateTransitionOutputsDigest
	}
	return nil
}

func (x *CertifiedPrepare) GetStateRootDigest() []byte {
	if x != nil {
		return x.StateRootDigest
	}
	return nil
}

func (x *CertifiedPrepare) GetReportsPlusPrecursorDigest() []byte {
	if x != nil {
		return x.ReportsPlusPrecursorDigest
	}
	return nil
}

func (x *CertifiedPrepare) GetPrepareQuorumCertificate() []*AttributedPrepareSignature {
	if x != nil {
		return x.PrepareQuorumCertificate
	}
	return nil
}

type CertifiedCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                        uint64                       `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr                        uint64                       `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	StateTransitionInputsDigest  []byte                       `protobuf:"bytes,3,opt,name=state_transition_inputs_digest,json=stateTransitionInputsDigest,proto3" json:"state_transition_inputs_digest,omitempty"`
	StateTransitionOutputsDigest []byte                       `protobuf:"bytes,4,opt,name=state_transition_outputs_digest,json=stateTransitionOutputsDigest,proto3" json:"state_transition_outputs_digest,omitempty"`
	StateRootDigest              []byte                       `protobuf:"bytes,5,opt,name=state_root_digest,json=stateRootDigest,proto3" json:"state_root_digest,omitempty"`
	ReportsPlusPrecursorDigest   []byte                       `protobuf:"bytes,6,opt,name=reports_plus_precursor_digest,json=reportsPlusPrecursorDigest,proto3" json:"reports_plus_precursor_digest,omitempty"`
	CommitQuorumCertificate      []*AttributedCommitSignature `protobuf:"bytes,7,rep,name=commit_quorum_certificate,json=commitQuorumCertificate,proto3" json:"commit_quorum_certificate,omitempty"`
}

func (x *CertifiedCommit) Reset() {
	*x = CertifiedCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedCommit) ProtoMessage() {}

func (x *CertifiedCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedCommit.ProtoReflect.Descriptor instead.
func (*CertifiedCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{23}
}

func (x *CertifiedCommit) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CertifiedCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *CertifiedCommit) GetStateTransitionInputsDigest() []byte {
	if x != nil {
		return x.StateTransitionInputsDigest
	}
	return nil
}

func (x *CertifiedCommit) GetStateTransitionOutputsDigest() []byte {
	if x != nil {
		return x.StateTransitionOutputsDigest
	}
	return nil
}

func (x *CertifiedCommit) GetStateRootDigest() []byte {
	if x != nil {
		return x.StateRootDigest
	}
	return nil
}

func (x *CertifiedCommit) GetReportsPlusPrecursorDigest() []byte {
	if x != nil {
		return x.ReportsPlusPrecursorDigest
	}
	return nil
}

func (x *CertifiedCommit) GetCommitQuorumCertificate() []*AttributedCommitSignature {
	if x != nil {
		return x.CommitQuorumCertificate
	}
	return nil
}

type HighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr                 uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	CommittedElsePrepared bool   `protobuf:"varint,2,opt,name=committed_else_prepared,json=committedElsePrepared,proto3" json:"committed_else_prepared,omitempty"`
	Epoch                 uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *HighestCertifiedTimestamp) Reset() {
	*x = HighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighestCertifiedTimestamp) ProtoMessage() {}

func (x *HighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*HighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{24}
}

func (x *HighestCertifiedTimestamp) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *HighestCertifiedTimestamp) GetCommittedElsePrepared() bool {
	if x != nil {
		return x.CommittedElsePrepared
	}
	return false
}

func (x *HighestCertifiedTimestamp) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type AttributedSignedHighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedHighestCertifiedTimestamp *SignedHighestCertifiedTimestamp `protobuf:"bytes,1,opt,name=signed_highest_certified_timestamp,json=signedHighestCertifiedTimestamp,proto3" json:"signed_highest_certified_timestamp,omitempty"`
	Signer                          uint32                           `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedSignedHighestCertifiedTimestamp) Reset() {
	*x = AttributedSignedHighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedHighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedHighestCertifiedTimestamp) ProtoMessage() {}

func (x *AttributedSignedHighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedHighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*AttributedSignedHighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{25}
}

func (x *AttributedSignedHighestCertifiedTimestamp) GetSignedHighestCertifiedTimestamp() *SignedHighestCertifiedTimestamp {
	if x != nil {
		return x.SignedHighestCertifiedTimestamp
	}
	return nil
}

func (x *AttributedSignedHighestCertifiedTimestamp) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type SignedHighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestCertifiedTimestamp *HighestCertifiedTimestamp `protobuf:"bytes,1,opt,name=highest_certified_timestamp,json=highestCertifiedTimestamp,proto3" json:"highest_certified_timestamp,omitempty"`
	Signature                 []byte                     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedHighestCertifiedTimestamp) Reset() {
	*x = SignedHighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedHighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedHighestCertifiedTimestamp) ProtoMessage() {}

func (x *SignedHighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedHighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*SignedHighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{26}
}

func (x *SignedHighestCertifiedTimestamp) GetHighestCertifiedTimestamp() *HighestCertifiedTimestamp {
	if x != nil {
		return x.HighestCertifiedTimestamp
	}
	return nil
}

func (x *SignedHighestCertifiedTimestamp) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation []byte `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Observer    uint32 `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"`
}

func (x *AttributedObservation) Reset() {
	*x = AttributedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedObservation) ProtoMessage() {}

func (x *AttributedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedObservation.ProtoReflect.Descriptor instead.
func (*AttributedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{27}
}

func (x *AttributedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *AttributedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

type AttributedSignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedObservation *SignedObservation `protobuf:"bytes,1,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
	Observer          uint32             `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"`
}

func (x *AttributedSignedObservation) Reset() {
	*x = AttributedSignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedObservation) ProtoMessage() {}

func (x *AttributedSignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedObservation.ProtoReflect.Descriptor instead.
func (*AttributedSignedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{28}
}

func (x *AttributedSignedObservation) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

func (x *AttributedSignedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

type SignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation []byte `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedObservation) Reset() {
	*x = SignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedObservation) ProtoMessage() {}

func (x *SignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedObservation.ProtoReflect.Descriptor instead.
func (*SignedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{29}
}

func (x *SignedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *SignedObservation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedPrepareSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedPrepareSignature) Reset() {
	*x = AttributedPrepareSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedPrepareSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedPrepareSignature) ProtoMessage() {}

func (x *AttributedPrepareSignature) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedPrepareSignature.ProtoReflect.Descriptor instead.
func (*AttributedPrepareSignature) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{30}
}

func (x *AttributedPrepareSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedPrepareSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type AttributedCommitSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedCommitSignature) Reset() {
	*x = AttributedCommitSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedCommitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedCommitSignature) ProtoMessage() {}

func (x *AttributedCommitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedCommitSignature.ProtoReflect.Descriptor instead.
func (*AttributedCommitSignature) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{31}
}

func (x *AttributedCommitSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedCommitSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type AttestedStateTransitionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateTransitionBlock *StateTransitionBlock        `protobuf:"bytes,1,opt,name=state_transition_block,json=stateTransitionBlock,proto3" json:"state_transition_block,omitempty"`
	AttributedSignatures []*AttributedCommitSignature `protobuf:"bytes,2,rep,name=attributed_signatures,json=attributedSignatures,proto3" json:"attributed_signatures,omitempty"`
}

func (x *AttestedStateTransitionBlock) Reset() {
	*x = AttestedStateTransitionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestedStateTransitionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestedStateTransitionBlock) ProtoMessage() {}

func (x *AttestedStateTransitionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestedStateTransitionBlock.ProtoReflect.Descriptor instead.
func (*AttestedStateTransitionBlock) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{32}
}

func (x *AttestedStateTransitionBlock) GetStateTransitionBlock() *StateTransitionBlock {
	if x != nil {
		return x.StateTransitionBlock
	}
	return nil
}

func (x *AttestedStateTransitionBlock) GetAttributedSignatures() []*AttributedCommitSignature {
	if x != nil {
		return x.AttributedSignatures
	}
	return nil
}

type StateTransitionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                       uint64                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr                       uint64                  `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	StateTransitionInputsDigest []byte                  `protobuf:"bytes,3,opt,name=state_transition_inputs_digest,json=stateTransitionInputsDigest,proto3" json:"state_transition_inputs_digest,omitempty"`
	StateTransitionOutputs      *StateTransitionOutputs `protobuf:"bytes,4,opt,name=state_transition_outputs,json=stateTransitionOutputs,proto3" json:"state_transition_outputs,omitempty"`
	StateRootDigest             []byte                  `protobuf:"bytes,5,opt,name=state_root_digest,json=stateRootDigest,proto3" json:"state_root_digest,omitempty"`
	ReportsPlusPrecursorDigest  []byte                  `protobuf:"bytes,6,opt,name=reports_plus_precursor_digest,json=reportsPlusPrecursorDigest,proto3" json:"reports_plus_precursor_digest,omitempty"`
}

func (x *StateTransitionBlock) Reset() {
	*x = StateTransitionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateTransitionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateTransitionBlock) ProtoMessage() {}

func (x *StateTransitionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateTransitionBlock.ProtoReflect.Descriptor instead.
func (*StateTransitionBlock) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{33}
}

func (x *StateTransitionBlock) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StateTransitionBlock) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *StateTransitionBlock) GetStateTransitionInputsDigest() []byte {
	if x != nil {
		return x.StateTransitionInputsDigest
	}
	return nil
}

func (x *StateTransitionBlock) GetStateTransitionOutputs() *StateTransitionOutputs {
	if x != nil {
		return x.StateTransitionOutputs
	}
	return nil
}

func (x *StateTransitionBlock) GetStateRootDigest() []byte {
	if x != nil {
		return x.StateRootDigest
	}
	return nil
}

func (x *StateTransitionBlock) GetReportsPlusPrecursorDigest() []byte {
	if x != nil {
		return x.ReportsPlusPrecursorDigest
	}
	return nil
}

type StateTransitionOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteSet []*KeyValueModification `protobuf:"bytes,1,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
}

func (x *StateTransitionOutputs) Reset() {
	*x = StateTransitionOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateTransitionOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateTransitionOutputs) ProtoMessage() {}

func (x *StateTransitionOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateTransitionOutputs.ProtoReflect.Descriptor instead.
func (*StateTransitionOutputs) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{34}
}

func (x *StateTransitionOutputs) GetWriteSet() []*KeyValueModification {
	if x != nil {
		return x.WriteSet
	}
	return nil
}

type KeyValueModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Deleted bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *KeyValueModification) Reset() {
	*x = KeyValueModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueModification) ProtoMessage() {}

func (x *KeyValueModification) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueModification.ProtoReflect.Descriptor instead.
func (*KeyValueModification) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{35}
}

func (x *KeyValueModification) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValueModification) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyValueModification) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type StateTransitionInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr                  uint64                   `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Epoch                  uint64                   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round                  uint64                   `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Query                  []byte                   `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	AttributedObservations []*AttributedObservation `protobuf:"bytes,5,rep,name=attributed_observations,json=attributedObservations,proto3" json:"attributed_observations,omitempty"`
}

func (x *StateTransitionInputs) Reset() {
	*x = StateTransitionInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateTransitionInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateTransitionInputs) ProtoMessage() {}

func (x *StateTransitionInputs) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateTransitionInputs.ProtoReflect.Descriptor instead.
func (*StateTransitionInputs) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{36}
}

func (x *StateTransitionInputs) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *StateTransitionInputs) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StateTransitionInputs) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *StateTransitionInputs) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *StateTransitionInputs) GetAttributedObservations() []*AttributedObservation {
	if x != nil {
		return x.AttributedObservations
	}
	return nil
}

type MessageBlobOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkDigestsRoot []byte `protobuf:"bytes,1,opt,name=chunk_digests_root,json=chunkDigestsRoot,proto3" json:"chunk_digests_root,omitempty"`
	PayloadLength    uint64 `protobuf:"varint,2,opt,name=payload_length,json=payloadLength,proto3" json:"payload_length,omitempty"`
	ExpirySeqNr      uint64 `protobuf:"varint,3,opt,name=expiry_seq_nr,json=expirySeqNr,proto3" json:"expiry_seq_nr,omitempty"`
}

func (x *MessageBlobOffer) Reset() {
	*x = MessageBlobOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBlobOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBlobOffer) ProtoMessage() {}

func (x *MessageBlobOffer) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBlobOffer.ProtoReflect.Descriptor instead.
func (*MessageBlobOffer) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{37}
}

func (x *MessageBlobOffer) GetChunkDigestsRoot() []byte {
	if x != nil {
		return x.ChunkDigestsRoot
	}
	return nil
}

func (x *MessageBlobOffer) GetPayloadLength() uint64 {
	if x != nil {
		return x.PayloadLength
	}
	return 0
}

func (x *MessageBlobOffer) GetExpirySeqNr() uint64 {
	if x != nil {
		return x.ExpirySeqNr
	}
	return 0
}

type MessageBlobChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobDigest []byte `protobuf:"bytes,1,opt,name=blob_digest,json=blobDigest,proto3" json:"blob_digest,omitempty"`
	ChunkIndex uint64 `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
}

func (x *MessageBlobChunkRequest) Reset() {
	*x = MessageBlobChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBlobChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBlobChunkRequest) ProtoMessage() {}

func (x *MessageBlobChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBlobChunkRequest.ProtoReflect.Descriptor instead.
func (*MessageBlobChunkRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{38}
}

func (x *MessageBlobChunkRequest) GetBlobDigest() []byte {
	if x != nil {
		return x.BlobDigest
	}
	return nil
}

func (x *MessageBlobChunkRequest) GetChunkIndex() uint64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

type MessageBlobChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobDigest []byte   `protobuf:"bytes,1,opt,name=blob_digest,json=blobDigest,proto3" json:"blob_digest,omitempty"`
	ChunkIndex uint64   `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	GoAway     bool     `protobuf:"varint,3,opt,name=go_away,json=goAway,proto3" json:"go_away,omitempty"`
	Chunk      []byte   `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Proof      [][]byte `protobuf:"bytes,5,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (x *MessageBlobChunkResponse) Reset() {
	*x = MessageBlobChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBlobChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBlobChunkResponse) ProtoMessage() {}

func (x *MessageBlobChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBlobChunkResponse.ProtoReflect.Descriptor instead.
func (*MessageBlobChunkResponse) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{39}
}

func (x *MessageBlobChunkResponse) GetBlobDigest() []byte {
	if x != nil {
		return x.BlobDigest
	}
	return nil
}

func (x *MessageBlobChunkResponse) GetChunkIndex() uint64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *MessageBlobChunkResponse) GetGoAway() bool {
	if x != nil {
		return x.GoAway
	}
	return false
}

func (x *MessageBlobChunkResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *MessageBlobChunkResponse) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type MessageBlobOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobDigest  []byte `protobuf:"bytes,1,opt,name=blob_digest,json=blobDigest,proto3" json:"blob_digest,omitempty"`
	RejectOffer bool   `protobuf:"varint,2,opt,name=reject_offer,json=rejectOffer,proto3" json:"reject_offer,omitempty"`
	Signature   []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessageBlobOfferResponse) Reset() {
	*x = MessageBlobOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_1_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBlobOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBlobOfferResponse) ProtoMessage() {}

func (x *MessageBlobOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_1_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBlobOfferResponse.ProtoReflect.Descriptor instead.
func (*MessageBlobOfferResponse) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_1_messages_proto_rawDescGZIP(), []int{40}
}

func (x *MessageBlobOfferResponse) GetBlobDigest() []byte {
	if x != nil {
		return x.BlobDigest
	}
	return nil
}

func (x *MessageBlobOfferResponse) GetRejectOffer() bool {
	if x != nil {
		return x.RejectOffer
	}
	return false
}

func (x *MessageBlobOfferResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_offchainreporting3_1_messages_proto protoreflect.FileDescriptor

var file_offchainreporting3_1_messages_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x22, 0xe2, 0x10, 0x0a, 0x0e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x60,
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x57, 0x69, 0x73, 0x68, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x57, 0x69, 0x73, 0x68,
	0x12, 0x6f, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x13,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x26, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x6c, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a,
	0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x79, 0x0a, 0x1f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x6f, 0x0a,
	0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x1c, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x23,
	0x22, 0x2b, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x57, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x92, 0x02,
	0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x5b, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33,
	0x5f, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x82, 0x01,
	0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x51,
	0x0a, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x62, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a,
	0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x72, 0x12, 0x77, 0x0a, 0x1e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x0e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x72, 0x22, 0x6a, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0x62, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x25, 0x0a,
	0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x53,
	0x65, 0x71, 0x4e, 0x72, 0x22, 0xfe, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71,
	0x4e, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x45,
	0x78, 0x63, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x7b, 0x0a, 0x20, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x65, 0x71, 0x4e,
	0x72, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x16,
	0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x0c, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4c, 0x65,
	0x61, 0x66, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x53, 0x65,
	0x71, 0x4e, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64,
	0x49, 0x6e, 0x63, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x5f,
	0x61, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6f, 0x41, 0x77,
	0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x63, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x33, 0x5f, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x0e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x5b, 0x0a, 0x11,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x42, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x10, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x18, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x1f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x19, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x45, 0x6c, 0x73, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x22, 0xc8, 0x01, 0x0a, 0x29, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x82, 0x01, 0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x5f, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xb0, 0x01,
	0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x6f, 0x0a, 0x1b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x55, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x11, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x52, 0x0a, 0x1a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x1c, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x64, 0x0a, 0x15, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xdf, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x18, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x5f, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x16, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0x61, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0xd6, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x5f, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x71, 0x4e, 0x72, 0x22, 0x5b, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6f, 0x41, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x7c, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_offchainreporting3_1_messages_proto_rawDescOnce sync.Once
	file_offchainreporting3_1_messages_proto_rawDescData = file_offchainreporting3_1_messages_proto_rawDesc
)

func file_offchainreporting3_1_messages_proto_rawDescGZIP() []byte {
	file_offchainreporting3_1_messages_proto_rawDescOnce.Do(func() {
		file_offchainreporting3_1_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_offchainreporting3_1_messages_proto_rawDescData)
	})
	return file_offchainreporting3_1_messages_proto_rawDescData
}

var file_offchainreporting3_1_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_offchainreporting3_1_messages_proto_goTypes = []interface{}{
	(*MessageWrapper)(nil),                            // 0: offchainreporting3_1.MessageWrapper
	(*MessageNewEpochWish)(nil),                       // 1: offchainreporting3_1.MessageNewEpochWish
	(*MessageEpochStartRequest)(nil),                  // 2: offchainreporting3_1.MessageEpochStartRequest
	(*MessageEpochStart)(nil),                         // 3: offchainreporting3_1.MessageEpochStart
	(*MessageRoundStart)(nil),                         // 4: offchainreporting3_1.MessageRoundStart
	(*MessageObservation)(nil),                        // 5: offchainreporting3_1.MessageObservation
	(*MessageProposal)(nil),                           // 6: offchainreporting3_1.MessageProposal
	(*MessagePrepare)(nil),                            // 7: offchainreporting3_1.MessagePrepare
	(*MessageCommit)(nil),                             // 8: offchainreporting3_1.MessageCommit
	(*MessageReportSignatures)(nil),                   // 9: offchainreporting3_1.MessageReportSignatures
	(*MessageReportsPlusPrecursorRequest)(nil),        // 10: offchainreporting3_1.MessageReportsPlusPrecursorRequest
	(*MessageReportsPlusPrecursor)(nil),               // 11: offchainreporting3_1.MessageReportsPlusPrecursor
	(*MessageBlockSyncRequest)(nil),                   // 12: offchainreporting3_1.MessageBlockSyncRequest
	(*MessageBlockSyncResponse)(nil),                  // 13: offchainreporting3_1.MessageBlockSyncResponse
	(*MessageStateSyncSummary)(nil),                   // 14: offchainreporting3_1.MessageStateSyncSummary
	(*MessageTreeSyncChunkRequest)(nil),               // 15: offchainreporting3_1.MessageTreeSyncChunkRequest
	(*KeyValuePair)(nil),                              // 16: offchainreporting3_1.KeyValuePair
	(*LeafKeyAndValueDigests)(nil),                    // 17: offchainreporting3_1.LeafKeyAndValueDigests
	(*BoundingLeaf)(nil),                              // 18: offchainreporting3_1.BoundingLeaf
	(*MessageTreeSyncChunkResponse)(nil),              // 19: offchainreporting3_1.MessageTreeSyncChunkResponse
	(*EpochStartProof)(nil),                           // 20: offchainreporting3_1.EpochStartProof
	(*CertifiedPrepareOrCommit)(nil),                  // 21: offchainreporting3_1.CertifiedPrepareOrCommit
	(*CertifiedPrepare)(nil),                          // 22: offchainreporting3_1.CertifiedPrepare
	(*CertifiedCommit)(nil),                           // 23: offchainreporting3_1.CertifiedCommit
	(*HighestCertifiedTimestamp)(nil),                 // 24: offchainreporting3_1.HighestCertifiedTimestamp
	(*AttributedSignedHighestCertifiedTimestamp)(nil), // 25: offchainreporting3_1.AttributedSignedHighestCertifiedTimestamp
	(*SignedHighestCertifiedTimestamp)(nil),           // 26: offchainreporting3_1.SignedHighestCertifiedTimestamp
	(*AttributedObservation)(nil),                     // 27: offchainreporting3_1.AttributedObservation
	(*AttributedSignedObservation)(nil),               // 28: offchainreporting3_1.AttributedSignedObservation
	(*SignedObservation)(nil),                         // 29: offchainreporting3_1.SignedObservation
	(*AttributedPrepareSignature)(nil),                // 30: offchainreporting3_1.AttributedPrepareSignature
	(*AttributedCommitSignature)(nil),                 // 31: offchainreporting3_1.AttributedCommitSignature
	(*AttestedStateTransitionBlock)(nil),              // 32: offchainreporting3_1.AttestedStateTransitionBlock
	(*StateTransitionBlock)(nil),                      // 33: offchainreporting3_1.StateTransitionBlock
	(*StateTransitionOutputs)(nil),                    // 34: offchainreporting3_1.StateTransitionOutputs
	(*KeyValueModification)(nil),                      // 35: offchainreporting3_1.KeyValueModification
	(*StateTransitionInputs)(nil),                     // 36: offchainreporting3_1.StateTransitionInputs
	(*MessageBlobOffer)(nil),                          // 37: offchainreporting3_1.MessageBlobOffer
	(*MessageBlobChunkRequest)(nil),                   // 38: offchainreporting3_1.MessageBlobChunkRequest
	(*MessageBlobChunkResponse)(nil),                  // 39: offchainreporting3_1.MessageBlobChunkResponse
	(*MessageBlobOfferResponse)(nil),                  // 40: offchainreporting3_1.MessageBlobOfferResponse
}
var file_offchainreporting3_1_messages_proto_depIdxs = []int32{
	1,  // 0: offchainreporting3_1.MessageWrapper.message_new_epoch_wish:type_name -> offchainreporting3_1.MessageNewEpochWish
	2,  // 1: offchainreporting3_1.MessageWrapper.message_epoch_start_request:type_name -> offchainreporting3_1.MessageEpochStartRequest
	3,  // 2: offchainreporting3_1.MessageWrapper.message_epoch_start:type_name -> offchainreporting3_1.MessageEpochStart
	4,  // 3: offchainreporting3_1.MessageWrapper.message_round_start:type_name -> offchainreporting3_1.MessageRoundStart
	5,  // 4: offchainreporting3_1.MessageWrapper.message_observation:type_name -> offchainreporting3_1.MessageObservation
	6,  // 5: offchainreporting3_1.MessageWrapper.message_proposal:type_name -> offchainreporting3_1.MessageProposal
	7,  // 6: offchainreporting3_1.MessageWrapper.message_prepare:type_name -> offchainreporting3_1.MessagePrepare
	8,  // 7: offchainreporting3_1.MessageWrapper.message_commit:type_name -> offchainreporting3_1.MessageCommit
	9,  // 8: offchainreporting3_1.MessageWrapper.message_report_signatures:type_name -> offchainreporting3_1.MessageReportSignatures
	10, // 9: offchainreporting3_1.MessageWrapper.message_reports_plus_precursor_request:type_name -> offchainreporting3_1.MessageReportsPlusPrecursorRequest
	11, // 10: offchainreporting3_1.MessageWrapper.message_reports_plus_precursor:type_name -> offchainreporting3_1.MessageReportsPlusPrecursor
	12, // 11: offchainreporting3_1.MessageWrapper.message_block_sync_request:type_name -> offchainreporting3_1.MessageBlockSyncRequest
	13, // 12: offchainreporting3_1.MessageWrapper.message_block_sync_response:type_name -> offchainreporting3_1.MessageBlockSyncResponse
	14, // 13: offchainreporting3_1.MessageWrapper.message_state_sync_summary:type_name -> offchainreporting3_1.MessageStateSyncSummary
	15, // 14: offchainreporting3_1.MessageWrapper.message_tree_sync_chunk_request:type_name -> offchainreporting3_1.MessageTreeSyncChunkRequest
	19, // 15: offchainreporting3_1.MessageWrapper.message_tree_sync_chunk_response:type_name -> offchainreporting3_1.MessageTreeSyncChunkResponse
	37, // 16: offchainreporting3_1.MessageWrapper.message_blob_offer:type_name -> offchainreporting3_1.MessageBlobOffer
	40, // 17: offchainreporting3_1.MessageWrapper.message_blob_offer_response:type_name -> offchainreporting3_1.MessageBlobOfferResponse
	38, // 18: offchainreporting3_1.MessageWrapper.message_blob_chunk_request:type_name -> offchainreporting3_1.MessageBlobChunkRequest
	39, // 19: offchainreporting3_1.MessageWrapper.message_blob_chunk_response:type_name -> offchainreporting3_1.MessageBlobChunkResponse
	21, // 20: offchainreporting3_1.MessageEpochStartRequest.highest_certified:type_name -> offchainreporting3_1.CertifiedPrepareOrCommit
	26, // 21: offchainreporting3_1.MessageEpochStartRequest.signed_highest_certified_timestamp:type_name -> offchainreporting3_1.SignedHighestCertifiedTimestamp
	20, // 22: offchainreporting3_1.MessageEpochStart.epoch_start_proof:type_name -> offchainreporting3_1.EpochStartProof
	29, // 23: offchainreporting3_1.MessageObservation.signed_observation:type_name -> offchainreporting3_1.SignedObservation
	28, // 24: offchainreporting3_1.MessageProposal.attributed_signed_observations:type_name -> offchainreporting3_1.AttributedSignedObservation
	32, // 25: offchainreporting3_1.MessageBlockSyncResponse.attested_state_transition_blocks:type_name -> offchainreporting3_1.AttestedStateTransitionBlock
	17, // 26: offchainreporting3_1.BoundingLeaf.leaf:type_name -> offchainreporting3_1.LeafKeyAndValueDigests
	16, // 27: offchainreporting3_1.MessageTreeSyncChunkResponse.key_values:type_name -> offchainreporting3_1.KeyValuePair
	18, // 28: offchainreporting3_1.MessageTreeSyncChunkResponse.bounding_leaves:type_name -> offchainreporting3_1.BoundingLeaf
	21, // 29: offchainreporting3_1.EpochStartProof.highest_certified:type_name -> offchainreporting3_1.CertifiedPrepareOrCommit
	25, // 30: offchainreporting3_1.EpochStartProof.highest_certified_proof:type_name -> offchainreporting3_1.AttributedSignedHighestCertifiedTimestamp
	22, // 31: offchainreporting3_1.CertifiedPrepareOrCommit.prepare:type_name -> offchainreporting3_1.CertifiedPrepare
	23, // 32: offchainreporting3_1.CertifiedPrepareOrCommit.commit:type_name -> offchainreporting3_1.CertifiedCommit
	30, // 33: offchainreporting3_1.CertifiedPrepare.prepare_quorum_certificate:type_name -> offchainreporting3_1.AttributedPrepareSignature
	31, // 34: offchainreporting3_1.CertifiedCommit.commit_quorum_certificate:type_name -> offchainreporting3_1.AttributedCommitSignature
	26, // 35: offchainreporting3_1.AttributedSignedHighestCertifiedTimestamp.signed_highest_certified_timestamp:type_name -> offchainreporting3_1.SignedHighestCertifiedTimestamp
	24, // 36: offchainreporting3_1.SignedHighestCertifiedTimestamp.highest_certified_timestamp:type_name -> offchainreporting3_1.HighestCertifiedTimestamp
	29, // 37: offchainreporting3_1.AttributedSignedObservation.signed_observation:type_name -> offchainreporting3_1.SignedObservation
	33, // 38: offchainreporting3_1.AttestedStateTransitionBlock.state_transition_block:type_name -> offchainreporting3_1.StateTransitionBlock
	31, // 39: offchainreporting3_1.AttestedStateTransitionBlock.attributed_signatures:type_name -> offchainreporting3_1.AttributedCommitSignature
	34, // 40: offchainreporting3_1.StateTransitionBlock.state_transition_outputs:type_name -> offchainreporting3_1.StateTransitionOutputs
	35, // 41: offchainreporting3_1.StateTransitionOutputs.write_set:type_name -> offchainreporting3_1.KeyValueModification
	27, // 42: offchainreporting3_1.StateTransitionInputs.attributed_observations:type_name -> offchainreporting3_1.AttributedObservation
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_offchainreporting3_1_messages_proto_init() }
func file_offchainreporting3_1_messages_proto_init() {
	if File_offchainreporting3_1_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offchainreporting3_1_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNewEpochWish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEpochStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEpochStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRoundStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReportSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReportsPlusPrecursorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReportsPlusPrecursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBlockSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBlockSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStateSyncSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTreeSyncChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeafKeyAndValueDigests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTreeSyncChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochStartProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepareOrCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedHighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedHighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedPrepareSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedCommitSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestedStateTransitionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateTransitionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateTransitionOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateTransitionInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBlobOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBlobChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBlobChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_1_messages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBlobOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_offchainreporting3_1_messages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MessageWrapper_MessageNewEpochWish)(nil),
		(*MessageWrapper_MessageEpochStartRequest)(nil),
		(*MessageWrapper_MessageEpochStart)(nil),
		(*MessageWrapper_MessageRoundStart)(nil),
		(*MessageWrapper_MessageObservation)(nil),
		(*MessageWrapper_MessageProposal)(nil),
		(*MessageWrapper_MessagePrepare)(nil),
		(*MessageWrapper_MessageCommit)(nil),
		(*MessageWrapper_MessageReportSignatures)(nil),
		(*MessageWrapper_MessageReportsPlusPrecursorRequest)(nil),
		(*MessageWrapper_MessageReportsPlusPrecursor)(nil),
		(*MessageWrapper_MessageBlockSyncRequest)(nil),
		(*MessageWrapper_MessageBlockSyncResponse)(nil),
		(*MessageWrapper_MessageStateSyncSummary)(nil),
		(*MessageWrapper_MessageTreeSyncChunkRequest)(nil),
		(*MessageWrapper_MessageTreeSyncChunkResponse)(nil),
		(*MessageWrapper_MessageBlobOffer)(nil),
		(*MessageWrapper_MessageBlobOfferResponse)(nil),
		(*MessageWrapper_MessageBlobChunkRequest)(nil),
		(*MessageWrapper_MessageBlobChunkResponse)(nil),
	}
	file_offchainreporting3_1_messages_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*CertifiedPrepareOrCommit_Prepare)(nil),
		(*CertifiedPrepareOrCommit_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offchainreporting3_1_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_offchainreporting3_1_messages_proto_goTypes,
		DependencyIndexes: file_offchainreporting3_1_messages_proto_depIdxs,
		MessageInfos:      file_offchainreporting3_1_messages_proto_msgTypes,
	}.Build()
	File_offchainreporting3_1_messages_proto = out.File
	file_offchainreporting3_1_messages_proto_rawDesc = nil
	file_offchainreporting3_1_messages_proto_goTypes = nil
	file_offchainreporting3_1_messages_proto_depIdxs = nil
}
