// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: offchainreporting3_messages.proto

package serialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*MessageWrapper_MessageNewEpoch
	//	*MessageWrapper_MessageReconcile
	//	*MessageWrapper_MessageStartEpoch
	//	*MessageWrapper_MessageStartRound
	//	*MessageWrapper_MessageObserve
	//	*MessageWrapper_MessagePropose
	//	*MessageWrapper_MessagePrepare
	//	*MessageWrapper_MessageCommit
	//	*MessageWrapper_MessageFinal
	//	*MessageWrapper_MessageRequestCertifiedCommit
	//	*MessageWrapper_MessageSupplyCertifiedCommit
	Msg isMessageWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{0}
}

func (m *MessageWrapper) GetMsg() isMessageWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MessageWrapper) GetMessageNewEpoch() *MessageNewEpoch {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageNewEpoch); ok {
		return x.MessageNewEpoch
	}
	return nil
}

func (x *MessageWrapper) GetMessageReconcile() *MessageReconcile {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageReconcile); ok {
		return x.MessageReconcile
	}
	return nil
}

func (x *MessageWrapper) GetMessageStartEpoch() *MessageStartEpoch {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageStartEpoch); ok {
		return x.MessageStartEpoch
	}
	return nil
}

func (x *MessageWrapper) GetMessageStartRound() *MessageStartRound {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageStartRound); ok {
		return x.MessageStartRound
	}
	return nil
}

func (x *MessageWrapper) GetMessageObserve() *MessageObserve {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageObserve); ok {
		return x.MessageObserve
	}
	return nil
}

func (x *MessageWrapper) GetMessagePropose() *MessagePropose {
	if x, ok := x.GetMsg().(*MessageWrapper_MessagePropose); ok {
		return x.MessagePropose
	}
	return nil
}

func (x *MessageWrapper) GetMessagePrepare() *MessagePrepare {
	if x, ok := x.GetMsg().(*MessageWrapper_MessagePrepare); ok {
		return x.MessagePrepare
	}
	return nil
}

func (x *MessageWrapper) GetMessageCommit() *MessageCommit {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageCommit); ok {
		return x.MessageCommit
	}
	return nil
}

func (x *MessageWrapper) GetMessageFinal() *MessageFinal {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageFinal); ok {
		return x.MessageFinal
	}
	return nil
}

func (x *MessageWrapper) GetMessageRequestCertifiedCommit() *MessageRequestCertifiedCommit {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageRequestCertifiedCommit); ok {
		return x.MessageRequestCertifiedCommit
	}
	return nil
}

func (x *MessageWrapper) GetMessageSupplyCertifiedCommit() *MessageSupplyCertifiedCommit {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageSupplyCertifiedCommit); ok {
		return x.MessageSupplyCertifiedCommit
	}
	return nil
}

type isMessageWrapper_Msg interface {
	isMessageWrapper_Msg()
}

type MessageWrapper_MessageNewEpoch struct {
	MessageNewEpoch *MessageNewEpoch `protobuf:"bytes,17,opt,name=message_new_epoch,json=messageNewEpoch,proto3,oneof"`
}

type MessageWrapper_MessageReconcile struct {
	MessageReconcile *MessageReconcile `protobuf:"bytes,18,opt,name=message_reconcile,json=messageReconcile,proto3,oneof"`
}

type MessageWrapper_MessageStartEpoch struct {
	MessageStartEpoch *MessageStartEpoch `protobuf:"bytes,19,opt,name=message_start_epoch,json=messageStartEpoch,proto3,oneof"`
}

type MessageWrapper_MessageStartRound struct {
	MessageStartRound *MessageStartRound `protobuf:"bytes,20,opt,name=message_start_round,json=messageStartRound,proto3,oneof"`
}

type MessageWrapper_MessageObserve struct {
	MessageObserve *MessageObserve `protobuf:"bytes,21,opt,name=message_observe,json=messageObserve,proto3,oneof"`
}

type MessageWrapper_MessagePropose struct {
	MessagePropose *MessagePropose `protobuf:"bytes,22,opt,name=message_propose,json=messagePropose,proto3,oneof"`
}

type MessageWrapper_MessagePrepare struct {
	MessagePrepare *MessagePrepare `protobuf:"bytes,23,opt,name=message_prepare,json=messagePrepare,proto3,oneof"`
}

type MessageWrapper_MessageCommit struct {
	MessageCommit *MessageCommit `protobuf:"bytes,24,opt,name=message_commit,json=messageCommit,proto3,oneof"`
}

type MessageWrapper_MessageFinal struct {
	MessageFinal *MessageFinal `protobuf:"bytes,25,opt,name=message_final,json=messageFinal,proto3,oneof"`
}

type MessageWrapper_MessageRequestCertifiedCommit struct {
	MessageRequestCertifiedCommit *MessageRequestCertifiedCommit `protobuf:"bytes,26,opt,name=message_request_certified_commit,json=messageRequestCertifiedCommit,proto3,oneof"`
}

type MessageWrapper_MessageSupplyCertifiedCommit struct {
	MessageSupplyCertifiedCommit *MessageSupplyCertifiedCommit `protobuf:"bytes,27,opt,name=message_supply_certified_commit,json=messageSupplyCertifiedCommit,proto3,oneof"`
}

func (*MessageWrapper_MessageNewEpoch) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageReconcile) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageStartEpoch) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageStartRound) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageObserve) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessagePropose) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessagePrepare) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageCommit) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageFinal) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageRequestCertifiedCommit) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageSupplyCertifiedCommit) isMessageWrapper_Msg() {}

type MessageNewEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *MessageNewEpoch) Reset() {
	*x = MessageNewEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNewEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNewEpoch) ProtoMessage() {}

func (x *MessageNewEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNewEpoch.ProtoReflect.Descriptor instead.
func (*MessageNewEpoch) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{1}
}

func (x *MessageNewEpoch) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type MessageReconcile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                           uint64                           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	HighestCertified                *CertifiedPrepareOrCommit        `protobuf:"bytes,2,opt,name=highest_certified,json=highestCertified,proto3" json:"highest_certified,omitempty"`
	SignedHighestCertifiedTimestamp *SignedHighestCertifiedTimestamp `protobuf:"bytes,3,opt,name=signed_highest_certified_timestamp,json=signedHighestCertifiedTimestamp,proto3" json:"signed_highest_certified_timestamp,omitempty"`
}

func (x *MessageReconcile) Reset() {
	*x = MessageReconcile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReconcile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReconcile) ProtoMessage() {}

func (x *MessageReconcile) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReconcile.ProtoReflect.Descriptor instead.
func (*MessageReconcile) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{2}
}

func (x *MessageReconcile) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageReconcile) GetHighestCertified() *CertifiedPrepareOrCommit {
	if x != nil {
		return x.HighestCertified
	}
	return nil
}

func (x *MessageReconcile) GetSignedHighestCertifiedTimestamp() *SignedHighestCertifiedTimestamp {
	if x != nil {
		return x.SignedHighestCertifiedTimestamp
	}
	return nil
}

type MessageStartEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch           uint64           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StartEpochProof *StartEpochProof `protobuf:"bytes,2,opt,name=start_epoch_proof,json=startEpochProof,proto3" json:"start_epoch_proof,omitempty"`
}

func (x *MessageStartEpoch) Reset() {
	*x = MessageStartEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStartEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStartEpoch) ProtoMessage() {}

func (x *MessageStartEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStartEpoch.ProtoReflect.Descriptor instead.
func (*MessageStartEpoch) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{3}
}

func (x *MessageStartEpoch) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageStartEpoch) GetStartEpochProof() *StartEpochProof {
	if x != nil {
		return x.StartEpochProof
	}
	return nil
}

type MessageStartRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Query []byte `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *MessageStartRound) Reset() {
	*x = MessageStartRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStartRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStartRound) ProtoMessage() {}

func (x *MessageStartRound) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStartRound.ProtoReflect.Descriptor instead.
func (*MessageStartRound) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{4}
}

func (x *MessageStartRound) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageStartRound) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageStartRound) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type MessageObserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr             uint64             `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	SignedObservation *SignedObservation `protobuf:"bytes,3,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
}

func (x *MessageObserve) Reset() {
	*x = MessageObserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageObserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageObserve) ProtoMessage() {}

func (x *MessageObserve) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageObserve.ProtoReflect.Descriptor instead.
func (*MessageObserve) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{5}
}

func (x *MessageObserve) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageObserve) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageObserve) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

type MessagePropose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                        uint64                         `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr                        uint64                         `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	AttributedSignedObservations []*AttributedSignedObservation `protobuf:"bytes,3,rep,name=attributed_signed_observations,json=attributedSignedObservations,proto3" json:"attributed_signed_observations,omitempty"`
}

func (x *MessagePropose) Reset() {
	*x = MessagePropose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePropose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePropose) ProtoMessage() {}

func (x *MessagePropose) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePropose.ProtoReflect.Descriptor instead.
func (*MessagePropose) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MessagePropose) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessagePropose) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessagePropose) GetAttributedSignedObservations() []*AttributedSignedObservation {
	if x != nil {
		return x.AttributedSignedObservations
	}
	return nil
}

type MessagePrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr     uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessagePrepare) Reset() {
	*x = MessagePrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePrepare) ProtoMessage() {}

func (x *MessagePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePrepare.ProtoReflect.Descriptor instead.
func (*MessagePrepare) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{7}
}

func (x *MessagePrepare) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessagePrepare) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessagePrepare) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MessageCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr     uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessageCommit) Reset() {
	*x = MessageCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCommit) ProtoMessage() {}

func (x *MessageCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCommit.ProtoReflect.Descriptor instead.
func (*MessageCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{8}
}

func (x *MessageCommit) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageCommit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MessageFinal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr            uint64   `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	ReportSignatures [][]byte `protobuf:"bytes,2,rep,name=report_signatures,json=reportSignatures,proto3" json:"report_signatures,omitempty"`
}

func (x *MessageFinal) Reset() {
	*x = MessageFinal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFinal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFinal) ProtoMessage() {}

func (x *MessageFinal) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFinal.ProtoReflect.Descriptor instead.
func (*MessageFinal) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{9}
}

func (x *MessageFinal) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageFinal) GetReportSignatures() [][]byte {
	if x != nil {
		return x.ReportSignatures
	}
	return nil
}

type MessageRequestCertifiedCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
}

func (x *MessageRequestCertifiedCommit) Reset() {
	*x = MessageRequestCertifiedCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRequestCertifiedCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRequestCertifiedCommit) ProtoMessage() {}

func (x *MessageRequestCertifiedCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRequestCertifiedCommit.ProtoReflect.Descriptor instead.
func (*MessageRequestCertifiedCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{10}
}

func (x *MessageRequestCertifiedCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

type MessageSupplyCertifiedCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertifiedCommit *CertifiedPrepareOrCommitCommit `protobuf:"bytes,1,opt,name=certified_commit,json=certifiedCommit,proto3" json:"certified_commit,omitempty"`
}

func (x *MessageSupplyCertifiedCommit) Reset() {
	*x = MessageSupplyCertifiedCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSupplyCertifiedCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSupplyCertifiedCommit) ProtoMessage() {}

func (x *MessageSupplyCertifiedCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSupplyCertifiedCommit.ProtoReflect.Descriptor instead.
func (*MessageSupplyCertifiedCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{11}
}

func (x *MessageSupplyCertifiedCommit) GetCertifiedCommit() *CertifiedPrepareOrCommitCommit {
	if x != nil {
		return x.CertifiedCommit
	}
	return nil
}

type StartEpochProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestCertified      *CertifiedPrepareOrCommit                    `protobuf:"bytes,1,opt,name=highest_certified,json=highestCertified,proto3" json:"highest_certified,omitempty"`
	HighestCertifiedProof []*AttributedSignedHighestCertifiedTimestamp `protobuf:"bytes,2,rep,name=highest_certified_proof,json=highestCertifiedProof,proto3" json:"highest_certified_proof,omitempty"`
}

func (x *StartEpochProof) Reset() {
	*x = StartEpochProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartEpochProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEpochProof) ProtoMessage() {}

func (x *StartEpochProof) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEpochProof.ProtoReflect.Descriptor instead.
func (*StartEpochProof) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{12}
}

func (x *StartEpochProof) GetHighestCertified() *CertifiedPrepareOrCommit {
	if x != nil {
		return x.HighestCertified
	}
	return nil
}

func (x *StartEpochProof) GetHighestCertifiedProof() []*AttributedSignedHighestCertifiedTimestamp {
	if x != nil {
		return x.HighestCertifiedProof
	}
	return nil
}

type CertifiedPrepareOrCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PrepareOrCommit:
	//
	//	*CertifiedPrepareOrCommit_Prepare
	//	*CertifiedPrepareOrCommit_Commit
	PrepareOrCommit isCertifiedPrepareOrCommit_PrepareOrCommit `protobuf_oneof:"prepare_or_commit"`
}

func (x *CertifiedPrepareOrCommit) Reset() {
	*x = CertifiedPrepareOrCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepareOrCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepareOrCommit) ProtoMessage() {}

func (x *CertifiedPrepareOrCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepareOrCommit.ProtoReflect.Descriptor instead.
func (*CertifiedPrepareOrCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{13}
}

func (m *CertifiedPrepareOrCommit) GetPrepareOrCommit() isCertifiedPrepareOrCommit_PrepareOrCommit {
	if m != nil {
		return m.PrepareOrCommit
	}
	return nil
}

func (x *CertifiedPrepareOrCommit) GetPrepare() *CertifiedPrepareOrCommitPrepare {
	if x, ok := x.GetPrepareOrCommit().(*CertifiedPrepareOrCommit_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *CertifiedPrepareOrCommit) GetCommit() *CertifiedPrepareOrCommitCommit {
	if x, ok := x.GetPrepareOrCommit().(*CertifiedPrepareOrCommit_Commit); ok {
		return x.Commit
	}
	return nil
}

type isCertifiedPrepareOrCommit_PrepareOrCommit interface {
	isCertifiedPrepareOrCommit_PrepareOrCommit()
}

type CertifiedPrepareOrCommit_Prepare struct {
	Prepare *CertifiedPrepareOrCommitPrepare `protobuf:"bytes,1,opt,name=prepare,proto3,oneof"`
}

type CertifiedPrepareOrCommit_Commit struct {
	Commit *CertifiedPrepareOrCommitCommit `protobuf:"bytes,2,opt,name=commit,proto3,oneof"`
}

func (*CertifiedPrepareOrCommit_Prepare) isCertifiedPrepareOrCommit_PrepareOrCommit() {}

func (*CertifiedPrepareOrCommit_Commit) isCertifiedPrepareOrCommit_PrepareOrCommit() {}

type CertifiedPrepareOrCommitPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrepareEpoch             uint64                        `protobuf:"varint,1,opt,name=prepare_epoch,json=prepareEpoch,proto3" json:"prepare_epoch,omitempty"`
	SeqNr                    uint64                        `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	OutcomeInputsDigest      []byte                        `protobuf:"bytes,3,opt,name=outcome_inputs_digest,json=outcomeInputsDigest,proto3" json:"outcome_inputs_digest,omitempty"`
	Outcome                  []byte                        `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
	PrepareQuorumCertificate []*AttributedPrepareSignature `protobuf:"bytes,5,rep,name=prepare_quorum_certificate,json=prepareQuorumCertificate,proto3" json:"prepare_quorum_certificate,omitempty"`
}

func (x *CertifiedPrepareOrCommitPrepare) Reset() {
	*x = CertifiedPrepareOrCommitPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepareOrCommitPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepareOrCommitPrepare) ProtoMessage() {}

func (x *CertifiedPrepareOrCommitPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepareOrCommitPrepare.ProtoReflect.Descriptor instead.
func (*CertifiedPrepareOrCommitPrepare) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CertifiedPrepareOrCommitPrepare) GetPrepareEpoch() uint64 {
	if x != nil {
		return x.PrepareEpoch
	}
	return 0
}

func (x *CertifiedPrepareOrCommitPrepare) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *CertifiedPrepareOrCommitPrepare) GetOutcomeInputsDigest() []byte {
	if x != nil {
		return x.OutcomeInputsDigest
	}
	return nil
}

func (x *CertifiedPrepareOrCommitPrepare) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *CertifiedPrepareOrCommitPrepare) GetPrepareQuorumCertificate() []*AttributedPrepareSignature {
	if x != nil {
		return x.PrepareQuorumCertificate
	}
	return nil
}

type CertifiedPrepareOrCommitCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitEpoch             uint64                       `protobuf:"varint,1,opt,name=commit_epoch,json=commitEpoch,proto3" json:"commit_epoch,omitempty"`
	SeqNr                   uint64                       `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Outcome                 []byte                       `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
	CommitQuorumCertificate []*AttributedCommitSignature `protobuf:"bytes,4,rep,name=commit_quorum_certificate,json=commitQuorumCertificate,proto3" json:"commit_quorum_certificate,omitempty"`
}

func (x *CertifiedPrepareOrCommitCommit) Reset() {
	*x = CertifiedPrepareOrCommitCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepareOrCommitCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepareOrCommitCommit) ProtoMessage() {}

func (x *CertifiedPrepareOrCommitCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepareOrCommitCommit.ProtoReflect.Descriptor instead.
func (*CertifiedPrepareOrCommitCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{15}
}

func (x *CertifiedPrepareOrCommitCommit) GetCommitEpoch() uint64 {
	if x != nil {
		return x.CommitEpoch
	}
	return 0
}

func (x *CertifiedPrepareOrCommitCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *CertifiedPrepareOrCommitCommit) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *CertifiedPrepareOrCommitCommit) GetCommitQuorumCertificate() []*AttributedCommitSignature {
	if x != nil {
		return x.CommitQuorumCertificate
	}
	return nil
}

type HighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr                 uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	CommittedElsePrepared bool   `protobuf:"varint,2,opt,name=committed_else_prepared,json=committedElsePrepared,proto3" json:"committed_else_prepared,omitempty"`
}

func (x *HighestCertifiedTimestamp) Reset() {
	*x = HighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighestCertifiedTimestamp) ProtoMessage() {}

func (x *HighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*HighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{16}
}

func (x *HighestCertifiedTimestamp) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *HighestCertifiedTimestamp) GetCommittedElsePrepared() bool {
	if x != nil {
		return x.CommittedElsePrepared
	}
	return false
}

type AttributedSignedHighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedHighestCertifiedTimestamp *SignedHighestCertifiedTimestamp `protobuf:"bytes,1,opt,name=signed_highest_certified_timestamp,json=signedHighestCertifiedTimestamp,proto3" json:"signed_highest_certified_timestamp,omitempty"`
	Signer                          uint32                           `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedSignedHighestCertifiedTimestamp) Reset() {
	*x = AttributedSignedHighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedHighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedHighestCertifiedTimestamp) ProtoMessage() {}

func (x *AttributedSignedHighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedHighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*AttributedSignedHighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{17}
}

func (x *AttributedSignedHighestCertifiedTimestamp) GetSignedHighestCertifiedTimestamp() *SignedHighestCertifiedTimestamp {
	if x != nil {
		return x.SignedHighestCertifiedTimestamp
	}
	return nil
}

func (x *AttributedSignedHighestCertifiedTimestamp) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type SignedHighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestCertifiedTimestamp *HighestCertifiedTimestamp `protobuf:"bytes,1,opt,name=highest_certified_timestamp,json=highestCertifiedTimestamp,proto3" json:"highest_certified_timestamp,omitempty"`
	Signature                 []byte                     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedHighestCertifiedTimestamp) Reset() {
	*x = SignedHighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedHighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedHighestCertifiedTimestamp) ProtoMessage() {}

func (x *SignedHighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedHighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*SignedHighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{18}
}

func (x *SignedHighestCertifiedTimestamp) GetHighestCertifiedTimestamp() *HighestCertifiedTimestamp {
	if x != nil {
		return x.HighestCertifiedTimestamp
	}
	return nil
}

func (x *SignedHighestCertifiedTimestamp) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedSignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedObservation *SignedObservation `protobuf:"bytes,1,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
	Observer          uint32             `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"`
}

func (x *AttributedSignedObservation) Reset() {
	*x = AttributedSignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedObservation) ProtoMessage() {}

func (x *AttributedSignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedObservation.ProtoReflect.Descriptor instead.
func (*AttributedSignedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{19}
}

func (x *AttributedSignedObservation) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

func (x *AttributedSignedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

type SignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation []byte `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedObservation) Reset() {
	*x = SignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedObservation) ProtoMessage() {}

func (x *SignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedObservation.ProtoReflect.Descriptor instead.
func (*SignedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{20}
}

func (x *SignedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *SignedObservation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedPrepareSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedPrepareSignature) Reset() {
	*x = AttributedPrepareSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedPrepareSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedPrepareSignature) ProtoMessage() {}

func (x *AttributedPrepareSignature) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedPrepareSignature.ProtoReflect.Descriptor instead.
func (*AttributedPrepareSignature) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{21}
}

func (x *AttributedPrepareSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedPrepareSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type AttributedCommitSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedCommitSignature) Reset() {
	*x = AttributedCommitSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedCommitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedCommitSignature) ProtoMessage() {}

func (x *AttributedCommitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedCommitSignature.ProtoReflect.Descriptor instead.
func (*AttributedCommitSignature) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{22}
}

func (x *AttributedCommitSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedCommitSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

var File_offchainreporting3_messages_proto protoreflect.FileDescriptor

var file_offchainreporting3_messages_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x22, 0xf8, 0x07, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x53, 0x0a,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x57, 0x0a, 0x13, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x7c, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x79, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x11, 0x22, 0x27, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x86, 0x02, 0x0a, 0x10,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x59, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x7a, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x4f, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x56, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4,
	0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x75,
	0x0a, 0x1e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x52,
	0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0x36, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x22, 0x7d, 0x0a, 0x1c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x59, 0x0a,
	0x11, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x17, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0xce, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x4c, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x22, 0x99, 0x02, 0x0a, 0x1f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72,
	0x12, 0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x6c,
	0x0a, 0x1a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x18, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xdf, 0x01, 0x0a,
	0x1e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x6a,
	0x0a, 0x19, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x45, 0x6c,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x29, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6d, 0x0a, 0x1b, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x33, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x52, 0x0a, 0x1a, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22,
	0x51, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_offchainreporting3_messages_proto_rawDescOnce sync.Once
	file_offchainreporting3_messages_proto_rawDescData = file_offchainreporting3_messages_proto_rawDesc
)

func file_offchainreporting3_messages_proto_rawDescGZIP() []byte {
	file_offchainreporting3_messages_proto_rawDescOnce.Do(func() {
		file_offchainreporting3_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_offchainreporting3_messages_proto_rawDescData)
	})
	return file_offchainreporting3_messages_proto_rawDescData
}

var file_offchainreporting3_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_offchainreporting3_messages_proto_goTypes = []interface{}{
	(*MessageWrapper)(nil),                            // 0: offchainreporting3.MessageWrapper
	(*MessageNewEpoch)(nil),                           // 1: offchainreporting3.MessageNewEpoch
	(*MessageReconcile)(nil),                          // 2: offchainreporting3.MessageReconcile
	(*MessageStartEpoch)(nil),                         // 3: offchainreporting3.MessageStartEpoch
	(*MessageStartRound)(nil),                         // 4: offchainreporting3.MessageStartRound
	(*MessageObserve)(nil),                            // 5: offchainreporting3.MessageObserve
	(*MessagePropose)(nil),                            // 6: offchainreporting3.MessagePropose
	(*MessagePrepare)(nil),                            // 7: offchainreporting3.MessagePrepare
	(*MessageCommit)(nil),                             // 8: offchainreporting3.MessageCommit
	(*MessageFinal)(nil),                              // 9: offchainreporting3.MessageFinal
	(*MessageRequestCertifiedCommit)(nil),             // 10: offchainreporting3.MessageRequestCertifiedCommit
	(*MessageSupplyCertifiedCommit)(nil),              // 11: offchainreporting3.MessageSupplyCertifiedCommit
	(*StartEpochProof)(nil),                           // 12: offchainreporting3.StartEpochProof
	(*CertifiedPrepareOrCommit)(nil),                  // 13: offchainreporting3.CertifiedPrepareOrCommit
	(*CertifiedPrepareOrCommitPrepare)(nil),           // 14: offchainreporting3.CertifiedPrepareOrCommitPrepare
	(*CertifiedPrepareOrCommitCommit)(nil),            // 15: offchainreporting3.CertifiedPrepareOrCommitCommit
	(*HighestCertifiedTimestamp)(nil),                 // 16: offchainreporting3.HighestCertifiedTimestamp
	(*AttributedSignedHighestCertifiedTimestamp)(nil), // 17: offchainreporting3.AttributedSignedHighestCertifiedTimestamp
	(*SignedHighestCertifiedTimestamp)(nil),           // 18: offchainreporting3.SignedHighestCertifiedTimestamp
	(*AttributedSignedObservation)(nil),               // 19: offchainreporting3.AttributedSignedObservation
	(*SignedObservation)(nil),                         // 20: offchainreporting3.SignedObservation
	(*AttributedPrepareSignature)(nil),                // 21: offchainreporting3.AttributedPrepareSignature
	(*AttributedCommitSignature)(nil),                 // 22: offchainreporting3.AttributedCommitSignature
}
var file_offchainreporting3_messages_proto_depIdxs = []int32{
	1,  // 0: offchainreporting3.MessageWrapper.message_new_epoch:type_name -> offchainreporting3.MessageNewEpoch
	2,  // 1: offchainreporting3.MessageWrapper.message_reconcile:type_name -> offchainreporting3.MessageReconcile
	3,  // 2: offchainreporting3.MessageWrapper.message_start_epoch:type_name -> offchainreporting3.MessageStartEpoch
	4,  // 3: offchainreporting3.MessageWrapper.message_start_round:type_name -> offchainreporting3.MessageStartRound
	5,  // 4: offchainreporting3.MessageWrapper.message_observe:type_name -> offchainreporting3.MessageObserve
	6,  // 5: offchainreporting3.MessageWrapper.message_propose:type_name -> offchainreporting3.MessagePropose
	7,  // 6: offchainreporting3.MessageWrapper.message_prepare:type_name -> offchainreporting3.MessagePrepare
	8,  // 7: offchainreporting3.MessageWrapper.message_commit:type_name -> offchainreporting3.MessageCommit
	9,  // 8: offchainreporting3.MessageWrapper.message_final:type_name -> offchainreporting3.MessageFinal
	10, // 9: offchainreporting3.MessageWrapper.message_request_certified_commit:type_name -> offchainreporting3.MessageRequestCertifiedCommit
	11, // 10: offchainreporting3.MessageWrapper.message_supply_certified_commit:type_name -> offchainreporting3.MessageSupplyCertifiedCommit
	13, // 11: offchainreporting3.MessageReconcile.highest_certified:type_name -> offchainreporting3.CertifiedPrepareOrCommit
	18, // 12: offchainreporting3.MessageReconcile.signed_highest_certified_timestamp:type_name -> offchainreporting3.SignedHighestCertifiedTimestamp
	12, // 13: offchainreporting3.MessageStartEpoch.start_epoch_proof:type_name -> offchainreporting3.StartEpochProof
	20, // 14: offchainreporting3.MessageObserve.signed_observation:type_name -> offchainreporting3.SignedObservation
	19, // 15: offchainreporting3.MessagePropose.attributed_signed_observations:type_name -> offchainreporting3.AttributedSignedObservation
	15, // 16: offchainreporting3.MessageSupplyCertifiedCommit.certified_commit:type_name -> offchainreporting3.CertifiedPrepareOrCommitCommit
	13, // 17: offchainreporting3.StartEpochProof.highest_certified:type_name -> offchainreporting3.CertifiedPrepareOrCommit
	17, // 18: offchainreporting3.StartEpochProof.highest_certified_proof:type_name -> offchainreporting3.AttributedSignedHighestCertifiedTimestamp
	14, // 19: offchainreporting3.CertifiedPrepareOrCommit.prepare:type_name -> offchainreporting3.CertifiedPrepareOrCommitPrepare
	15, // 20: offchainreporting3.CertifiedPrepareOrCommit.commit:type_name -> offchainreporting3.CertifiedPrepareOrCommitCommit
	21, // 21: offchainreporting3.CertifiedPrepareOrCommitPrepare.prepare_quorum_certificate:type_name -> offchainreporting3.AttributedPrepareSignature
	22, // 22: offchainreporting3.CertifiedPrepareOrCommitCommit.commit_quorum_certificate:type_name -> offchainreporting3.AttributedCommitSignature
	18, // 23: offchainreporting3.AttributedSignedHighestCertifiedTimestamp.signed_highest_certified_timestamp:type_name -> offchainreporting3.SignedHighestCertifiedTimestamp
	16, // 24: offchainreporting3.SignedHighestCertifiedTimestamp.highest_certified_timestamp:type_name -> offchainreporting3.HighestCertifiedTimestamp
	20, // 25: offchainreporting3.AttributedSignedObservation.signed_observation:type_name -> offchainreporting3.SignedObservation
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_offchainreporting3_messages_proto_init() }
func file_offchainreporting3_messages_proto_init() {
	if File_offchainreporting3_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offchainreporting3_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNewEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReconcile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStartEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStartRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageObserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePropose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFinal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRequestCertifiedCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSupplyCertifiedCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartEpochProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepareOrCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepareOrCommitPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepareOrCommitCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedHighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedHighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedPrepareSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedCommitSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_offchainreporting3_messages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MessageWrapper_MessageNewEpoch)(nil),
		(*MessageWrapper_MessageReconcile)(nil),
		(*MessageWrapper_MessageStartEpoch)(nil),
		(*MessageWrapper_MessageStartRound)(nil),
		(*MessageWrapper_MessageObserve)(nil),
		(*MessageWrapper_MessagePropose)(nil),
		(*MessageWrapper_MessagePrepare)(nil),
		(*MessageWrapper_MessageCommit)(nil),
		(*MessageWrapper_MessageFinal)(nil),
		(*MessageWrapper_MessageRequestCertifiedCommit)(nil),
		(*MessageWrapper_MessageSupplyCertifiedCommit)(nil),
	}
	file_offchainreporting3_messages_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CertifiedPrepareOrCommit_Prepare)(nil),
		(*CertifiedPrepareOrCommit_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offchainreporting3_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_offchainreporting3_messages_proto_goTypes,
		DependencyIndexes: file_offchainreporting3_messages_proto_depIdxs,
		MessageInfos:      file_offchainreporting3_messages_proto_msgTypes,
	}.Build()
	File_offchainreporting3_messages_proto = out.File
	file_offchainreporting3_messages_proto_rawDesc = nil
	file_offchainreporting3_messages_proto_goTypes = nil
	file_offchainreporting3_messages_proto_depIdxs = nil
}
