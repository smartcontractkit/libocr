// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: offchainreporting3_messages.proto

package serialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*MessageWrapper_MessageNewEpochWish
	//	*MessageWrapper_MessageEpochStartRequest
	//	*MessageWrapper_MessageEpochStart
	//	*MessageWrapper_MessageRoundStart
	//	*MessageWrapper_MessageObservation
	//	*MessageWrapper_MessageProposal
	//	*MessageWrapper_MessagePrepare
	//	*MessageWrapper_MessageCommit
	//	*MessageWrapper_MessageReportSignatures
	//	*MessageWrapper_MessageCertifiedCommitRequest
	//	*MessageWrapper_MessageCertifiedCommit
	Msg isMessageWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{0}
}

func (m *MessageWrapper) GetMsg() isMessageWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MessageWrapper) GetMessageNewEpochWish() *MessageNewEpochWish {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageNewEpochWish); ok {
		return x.MessageNewEpochWish
	}
	return nil
}

func (x *MessageWrapper) GetMessageEpochStartRequest() *MessageEpochStartRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageEpochStartRequest); ok {
		return x.MessageEpochStartRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageEpochStart() *MessageEpochStart {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageEpochStart); ok {
		return x.MessageEpochStart
	}
	return nil
}

func (x *MessageWrapper) GetMessageRoundStart() *MessageRoundStart {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageRoundStart); ok {
		return x.MessageRoundStart
	}
	return nil
}

func (x *MessageWrapper) GetMessageObservation() *MessageObservation {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageObservation); ok {
		return x.MessageObservation
	}
	return nil
}

func (x *MessageWrapper) GetMessageProposal() *MessageProposal {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageProposal); ok {
		return x.MessageProposal
	}
	return nil
}

func (x *MessageWrapper) GetMessagePrepare() *MessagePrepare {
	if x, ok := x.GetMsg().(*MessageWrapper_MessagePrepare); ok {
		return x.MessagePrepare
	}
	return nil
}

func (x *MessageWrapper) GetMessageCommit() *MessageCommit {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageCommit); ok {
		return x.MessageCommit
	}
	return nil
}

func (x *MessageWrapper) GetMessageReportSignatures() *MessageReportSignatures {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageReportSignatures); ok {
		return x.MessageReportSignatures
	}
	return nil
}

func (x *MessageWrapper) GetMessageCertifiedCommitRequest() *MessageCertifiedCommitRequest {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageCertifiedCommitRequest); ok {
		return x.MessageCertifiedCommitRequest
	}
	return nil
}

func (x *MessageWrapper) GetMessageCertifiedCommit() *MessageCertifiedCommit {
	if x, ok := x.GetMsg().(*MessageWrapper_MessageCertifiedCommit); ok {
		return x.MessageCertifiedCommit
	}
	return nil
}

type isMessageWrapper_Msg interface {
	isMessageWrapper_Msg()
}

type MessageWrapper_MessageNewEpochWish struct {
	MessageNewEpochWish *MessageNewEpochWish `protobuf:"bytes,17,opt,name=message_new_epoch_wish,json=messageNewEpochWish,proto3,oneof"`
}

type MessageWrapper_MessageEpochStartRequest struct {
	MessageEpochStartRequest *MessageEpochStartRequest `protobuf:"bytes,18,opt,name=message_epoch_start_request,json=messageEpochStartRequest,proto3,oneof"`
}

type MessageWrapper_MessageEpochStart struct {
	MessageEpochStart *MessageEpochStart `protobuf:"bytes,19,opt,name=message_epoch_start,json=messageEpochStart,proto3,oneof"`
}

type MessageWrapper_MessageRoundStart struct {
	MessageRoundStart *MessageRoundStart `protobuf:"bytes,20,opt,name=message_round_start,json=messageRoundStart,proto3,oneof"`
}

type MessageWrapper_MessageObservation struct {
	MessageObservation *MessageObservation `protobuf:"bytes,21,opt,name=message_observation,json=messageObservation,proto3,oneof"`
}

type MessageWrapper_MessageProposal struct {
	MessageProposal *MessageProposal `protobuf:"bytes,22,opt,name=message_proposal,json=messageProposal,proto3,oneof"`
}

type MessageWrapper_MessagePrepare struct {
	MessagePrepare *MessagePrepare `protobuf:"bytes,23,opt,name=message_prepare,json=messagePrepare,proto3,oneof"`
}

type MessageWrapper_MessageCommit struct {
	MessageCommit *MessageCommit `protobuf:"bytes,24,opt,name=message_commit,json=messageCommit,proto3,oneof"`
}

type MessageWrapper_MessageReportSignatures struct {
	MessageReportSignatures *MessageReportSignatures `protobuf:"bytes,25,opt,name=message_report_signatures,json=messageReportSignatures,proto3,oneof"`
}

type MessageWrapper_MessageCertifiedCommitRequest struct {
	MessageCertifiedCommitRequest *MessageCertifiedCommitRequest `protobuf:"bytes,26,opt,name=message_certified_commit_request,json=messageCertifiedCommitRequest,proto3,oneof"`
}

type MessageWrapper_MessageCertifiedCommit struct {
	MessageCertifiedCommit *MessageCertifiedCommit `protobuf:"bytes,27,opt,name=message_certified_commit,json=messageCertifiedCommit,proto3,oneof"`
}

func (*MessageWrapper_MessageNewEpochWish) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageEpochStartRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageEpochStart) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageRoundStart) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageObservation) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageProposal) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessagePrepare) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageCommit) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageReportSignatures) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageCertifiedCommitRequest) isMessageWrapper_Msg() {}

func (*MessageWrapper_MessageCertifiedCommit) isMessageWrapper_Msg() {}

type MessageNewEpochWish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *MessageNewEpochWish) Reset() {
	*x = MessageNewEpochWish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNewEpochWish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNewEpochWish) ProtoMessage() {}

func (x *MessageNewEpochWish) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNewEpochWish.ProtoReflect.Descriptor instead.
func (*MessageNewEpochWish) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{1}
}

func (x *MessageNewEpochWish) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type MessageEpochStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                           uint64                           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	HighestCertified                *CertifiedPrepareOrCommit        `protobuf:"bytes,2,opt,name=highest_certified,json=highestCertified,proto3" json:"highest_certified,omitempty"`
	SignedHighestCertifiedTimestamp *SignedHighestCertifiedTimestamp `protobuf:"bytes,3,opt,name=signed_highest_certified_timestamp,json=signedHighestCertifiedTimestamp,proto3" json:"signed_highest_certified_timestamp,omitempty"`
}

func (x *MessageEpochStartRequest) Reset() {
	*x = MessageEpochStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEpochStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEpochStartRequest) ProtoMessage() {}

func (x *MessageEpochStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEpochStartRequest.ProtoReflect.Descriptor instead.
func (*MessageEpochStartRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{2}
}

func (x *MessageEpochStartRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageEpochStartRequest) GetHighestCertified() *CertifiedPrepareOrCommit {
	if x != nil {
		return x.HighestCertified
	}
	return nil
}

func (x *MessageEpochStartRequest) GetSignedHighestCertifiedTimestamp() *SignedHighestCertifiedTimestamp {
	if x != nil {
		return x.SignedHighestCertifiedTimestamp
	}
	return nil
}

type MessageEpochStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch           uint64           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	EpochStartProof *EpochStartProof `protobuf:"bytes,2,opt,name=epoch_start_proof,json=epochStartProof,proto3" json:"epoch_start_proof,omitempty"`
}

func (x *MessageEpochStart) Reset() {
	*x = MessageEpochStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEpochStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEpochStart) ProtoMessage() {}

func (x *MessageEpochStart) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEpochStart.ProtoReflect.Descriptor instead.
func (*MessageEpochStart) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{3}
}

func (x *MessageEpochStart) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageEpochStart) GetEpochStartProof() *EpochStartProof {
	if x != nil {
		return x.EpochStartProof
	}
	return nil
}

type MessageRoundStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Query []byte `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *MessageRoundStart) Reset() {
	*x = MessageRoundStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRoundStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRoundStart) ProtoMessage() {}

func (x *MessageRoundStart) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRoundStart.ProtoReflect.Descriptor instead.
func (*MessageRoundStart) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{4}
}

func (x *MessageRoundStart) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageRoundStart) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageRoundStart) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type MessageObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr             uint64             `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	SignedObservation *SignedObservation `protobuf:"bytes,3,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
}

func (x *MessageObservation) Reset() {
	*x = MessageObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageObservation) ProtoMessage() {}

func (x *MessageObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageObservation.ProtoReflect.Descriptor instead.
func (*MessageObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{5}
}

func (x *MessageObservation) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageObservation) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageObservation) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

type MessageProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                        uint64                         `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr                        uint64                         `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	AttributedSignedObservations []*AttributedSignedObservation `protobuf:"bytes,3,rep,name=attributed_signed_observations,json=attributedSignedObservations,proto3" json:"attributed_signed_observations,omitempty"`
}

func (x *MessageProposal) Reset() {
	*x = MessageProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageProposal) ProtoMessage() {}

func (x *MessageProposal) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageProposal.ProtoReflect.Descriptor instead.
func (*MessageProposal) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MessageProposal) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageProposal) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageProposal) GetAttributedSignedObservations() []*AttributedSignedObservation {
	if x != nil {
		return x.AttributedSignedObservations
	}
	return nil
}

type MessagePrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr     uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessagePrepare) Reset() {
	*x = MessagePrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePrepare) ProtoMessage() {}

func (x *MessagePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePrepare.ProtoReflect.Descriptor instead.
func (*MessagePrepare) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{7}
}

func (x *MessagePrepare) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessagePrepare) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessagePrepare) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MessageCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNr     uint64 `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MessageCommit) Reset() {
	*x = MessageCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCommit) ProtoMessage() {}

func (x *MessageCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCommit.ProtoReflect.Descriptor instead.
func (*MessageCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{8}
}

func (x *MessageCommit) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *MessageCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageCommit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MessageReportSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr            uint64   `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	ReportSignatures [][]byte `protobuf:"bytes,2,rep,name=report_signatures,json=reportSignatures,proto3" json:"report_signatures,omitempty"`
}

func (x *MessageReportSignatures) Reset() {
	*x = MessageReportSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReportSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReportSignatures) ProtoMessage() {}

func (x *MessageReportSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReportSignatures.ProtoReflect.Descriptor instead.
func (*MessageReportSignatures) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{9}
}

func (x *MessageReportSignatures) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *MessageReportSignatures) GetReportSignatures() [][]byte {
	if x != nil {
		return x.ReportSignatures
	}
	return nil
}

type MessageCertifiedCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
}

func (x *MessageCertifiedCommitRequest) Reset() {
	*x = MessageCertifiedCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCertifiedCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCertifiedCommitRequest) ProtoMessage() {}

func (x *MessageCertifiedCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCertifiedCommitRequest.ProtoReflect.Descriptor instead.
func (*MessageCertifiedCommitRequest) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{10}
}

func (x *MessageCertifiedCommitRequest) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

type MessageCertifiedCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertifiedCommit *CertifiedCommit `protobuf:"bytes,1,opt,name=certified_commit,json=certifiedCommit,proto3" json:"certified_commit,omitempty"`
}

func (x *MessageCertifiedCommit) Reset() {
	*x = MessageCertifiedCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCertifiedCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCertifiedCommit) ProtoMessage() {}

func (x *MessageCertifiedCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCertifiedCommit.ProtoReflect.Descriptor instead.
func (*MessageCertifiedCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{11}
}

func (x *MessageCertifiedCommit) GetCertifiedCommit() *CertifiedCommit {
	if x != nil {
		return x.CertifiedCommit
	}
	return nil
}

type EpochStartProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestCertified      *CertifiedPrepareOrCommit                    `protobuf:"bytes,1,opt,name=highest_certified,json=highestCertified,proto3" json:"highest_certified,omitempty"`
	HighestCertifiedProof []*AttributedSignedHighestCertifiedTimestamp `protobuf:"bytes,2,rep,name=highest_certified_proof,json=highestCertifiedProof,proto3" json:"highest_certified_proof,omitempty"`
}

func (x *EpochStartProof) Reset() {
	*x = EpochStartProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochStartProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochStartProof) ProtoMessage() {}

func (x *EpochStartProof) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochStartProof.ProtoReflect.Descriptor instead.
func (*EpochStartProof) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{12}
}

func (x *EpochStartProof) GetHighestCertified() *CertifiedPrepareOrCommit {
	if x != nil {
		return x.HighestCertified
	}
	return nil
}

func (x *EpochStartProof) GetHighestCertifiedProof() []*AttributedSignedHighestCertifiedTimestamp {
	if x != nil {
		return x.HighestCertifiedProof
	}
	return nil
}

type CertifiedPrepareOrCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PrepareOrCommit:
	//
	//	*CertifiedPrepareOrCommit_Prepare
	//	*CertifiedPrepareOrCommit_Commit
	PrepareOrCommit isCertifiedPrepareOrCommit_PrepareOrCommit `protobuf_oneof:"prepare_or_commit"`
}

func (x *CertifiedPrepareOrCommit) Reset() {
	*x = CertifiedPrepareOrCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepareOrCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepareOrCommit) ProtoMessage() {}

func (x *CertifiedPrepareOrCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepareOrCommit.ProtoReflect.Descriptor instead.
func (*CertifiedPrepareOrCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{13}
}

func (m *CertifiedPrepareOrCommit) GetPrepareOrCommit() isCertifiedPrepareOrCommit_PrepareOrCommit {
	if m != nil {
		return m.PrepareOrCommit
	}
	return nil
}

func (x *CertifiedPrepareOrCommit) GetPrepare() *CertifiedPrepare {
	if x, ok := x.GetPrepareOrCommit().(*CertifiedPrepareOrCommit_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *CertifiedPrepareOrCommit) GetCommit() *CertifiedCommit {
	if x, ok := x.GetPrepareOrCommit().(*CertifiedPrepareOrCommit_Commit); ok {
		return x.Commit
	}
	return nil
}

type isCertifiedPrepareOrCommit_PrepareOrCommit interface {
	isCertifiedPrepareOrCommit_PrepareOrCommit()
}

type CertifiedPrepareOrCommit_Prepare struct {
	Prepare *CertifiedPrepare `protobuf:"bytes,1,opt,name=prepare,proto3,oneof"`
}

type CertifiedPrepareOrCommit_Commit struct {
	Commit *CertifiedCommit `protobuf:"bytes,2,opt,name=commit,proto3,oneof"`
}

func (*CertifiedPrepareOrCommit_Prepare) isCertifiedPrepareOrCommit_PrepareOrCommit() {}

func (*CertifiedPrepareOrCommit_Commit) isCertifiedPrepareOrCommit_PrepareOrCommit() {}

type CertifiedPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrepareEpoch             uint64                        `protobuf:"varint,1,opt,name=prepare_epoch,json=prepareEpoch,proto3" json:"prepare_epoch,omitempty"`
	SeqNr                    uint64                        `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	OutcomeInputsDigest      []byte                        `protobuf:"bytes,3,opt,name=outcome_inputs_digest,json=outcomeInputsDigest,proto3" json:"outcome_inputs_digest,omitempty"`
	Outcome                  []byte                        `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
	PrepareQuorumCertificate []*AttributedPrepareSignature `protobuf:"bytes,5,rep,name=prepare_quorum_certificate,json=prepareQuorumCertificate,proto3" json:"prepare_quorum_certificate,omitempty"`
}

func (x *CertifiedPrepare) Reset() {
	*x = CertifiedPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedPrepare) ProtoMessage() {}

func (x *CertifiedPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedPrepare.ProtoReflect.Descriptor instead.
func (*CertifiedPrepare) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CertifiedPrepare) GetPrepareEpoch() uint64 {
	if x != nil {
		return x.PrepareEpoch
	}
	return 0
}

func (x *CertifiedPrepare) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *CertifiedPrepare) GetOutcomeInputsDigest() []byte {
	if x != nil {
		return x.OutcomeInputsDigest
	}
	return nil
}

func (x *CertifiedPrepare) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *CertifiedPrepare) GetPrepareQuorumCertificate() []*AttributedPrepareSignature {
	if x != nil {
		return x.PrepareQuorumCertificate
	}
	return nil
}

type CertifiedCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitEpoch             uint64                       `protobuf:"varint,1,opt,name=commit_epoch,json=commitEpoch,proto3" json:"commit_epoch,omitempty"`
	SeqNr                   uint64                       `protobuf:"varint,2,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	Outcome                 []byte                       `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
	CommitQuorumCertificate []*AttributedCommitSignature `protobuf:"bytes,4,rep,name=commit_quorum_certificate,json=commitQuorumCertificate,proto3" json:"commit_quorum_certificate,omitempty"`
}

func (x *CertifiedCommit) Reset() {
	*x = CertifiedCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifiedCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedCommit) ProtoMessage() {}

func (x *CertifiedCommit) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedCommit.ProtoReflect.Descriptor instead.
func (*CertifiedCommit) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{15}
}

func (x *CertifiedCommit) GetCommitEpoch() uint64 {
	if x != nil {
		return x.CommitEpoch
	}
	return 0
}

func (x *CertifiedCommit) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *CertifiedCommit) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *CertifiedCommit) GetCommitQuorumCertificate() []*AttributedCommitSignature {
	if x != nil {
		return x.CommitQuorumCertificate
	}
	return nil
}

type HighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr                 uint64 `protobuf:"varint,1,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	CommittedElsePrepared bool   `protobuf:"varint,2,opt,name=committed_else_prepared,json=committedElsePrepared,proto3" json:"committed_else_prepared,omitempty"`
}

func (x *HighestCertifiedTimestamp) Reset() {
	*x = HighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighestCertifiedTimestamp) ProtoMessage() {}

func (x *HighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*HighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{16}
}

func (x *HighestCertifiedTimestamp) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *HighestCertifiedTimestamp) GetCommittedElsePrepared() bool {
	if x != nil {
		return x.CommittedElsePrepared
	}
	return false
}

type AttributedSignedHighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedHighestCertifiedTimestamp *SignedHighestCertifiedTimestamp `protobuf:"bytes,1,opt,name=signed_highest_certified_timestamp,json=signedHighestCertifiedTimestamp,proto3" json:"signed_highest_certified_timestamp,omitempty"`
	Signer                          uint32                           `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedSignedHighestCertifiedTimestamp) Reset() {
	*x = AttributedSignedHighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedHighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedHighestCertifiedTimestamp) ProtoMessage() {}

func (x *AttributedSignedHighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedHighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*AttributedSignedHighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{17}
}

func (x *AttributedSignedHighestCertifiedTimestamp) GetSignedHighestCertifiedTimestamp() *SignedHighestCertifiedTimestamp {
	if x != nil {
		return x.SignedHighestCertifiedTimestamp
	}
	return nil
}

func (x *AttributedSignedHighestCertifiedTimestamp) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type SignedHighestCertifiedTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestCertifiedTimestamp *HighestCertifiedTimestamp `protobuf:"bytes,1,opt,name=highest_certified_timestamp,json=highestCertifiedTimestamp,proto3" json:"highest_certified_timestamp,omitempty"`
	Signature                 []byte                     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedHighestCertifiedTimestamp) Reset() {
	*x = SignedHighestCertifiedTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedHighestCertifiedTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedHighestCertifiedTimestamp) ProtoMessage() {}

func (x *SignedHighestCertifiedTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedHighestCertifiedTimestamp.ProtoReflect.Descriptor instead.
func (*SignedHighestCertifiedTimestamp) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{18}
}

func (x *SignedHighestCertifiedTimestamp) GetHighestCertifiedTimestamp() *HighestCertifiedTimestamp {
	if x != nil {
		return x.HighestCertifiedTimestamp
	}
	return nil
}

func (x *SignedHighestCertifiedTimestamp) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedSignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedObservation *SignedObservation `protobuf:"bytes,1,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
	Observer          uint32             `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"`
}

func (x *AttributedSignedObservation) Reset() {
	*x = AttributedSignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedObservation) ProtoMessage() {}

func (x *AttributedSignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedObservation.ProtoReflect.Descriptor instead.
func (*AttributedSignedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{19}
}

func (x *AttributedSignedObservation) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

func (x *AttributedSignedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

type SignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation []byte `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedObservation) Reset() {
	*x = SignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedObservation) ProtoMessage() {}

func (x *SignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedObservation.ProtoReflect.Descriptor instead.
func (*SignedObservation) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{20}
}

func (x *SignedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *SignedObservation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedPrepareSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedPrepareSignature) Reset() {
	*x = AttributedPrepareSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedPrepareSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedPrepareSignature) ProtoMessage() {}

func (x *AttributedPrepareSignature) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedPrepareSignature.ProtoReflect.Descriptor instead.
func (*AttributedPrepareSignature) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{21}
}

func (x *AttributedPrepareSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedPrepareSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

type AttributedCommitSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AttributedCommitSignature) Reset() {
	*x = AttributedCommitSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offchainreporting3_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedCommitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedCommitSignature) ProtoMessage() {}

func (x *AttributedCommitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_offchainreporting3_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedCommitSignature.ProtoReflect.Descriptor instead.
func (*AttributedCommitSignature) Descriptor() ([]byte, []int) {
	return file_offchainreporting3_messages_proto_rawDescGZIP(), []int{22}
}

func (x *AttributedCommitSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedCommitSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

var File_offchainreporting3_messages_proto protoreflect.FileDescriptor

var file_offchainreporting3_messages_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x22, 0xbd, 0x08, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x16, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x77, 0x69, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x57,
	0x69, 0x73, 0x68, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x57, 0x69, 0x73, 0x68, 0x12, 0x6d, 0x0a, 0x1b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x69, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x7c,
	0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x18,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x11, 0x22, 0x2b, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x57, 0x69, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x8e, 0x02, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x59, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7a, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x4f, 0x0a, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0x56, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x4e, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x54, 0x0a,
	0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x72, 0x12, 0x75, 0x0a, 0x1e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x0e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x22, 0x68, 0x0a, 0x16, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x59, 0x0a, 0x11, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x17, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xb0, 0x01, 0x0a, 0x18,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x8a,
	0x02, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x6c, 0x0a,
	0x1a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x18, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x0f,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x6a,
	0x0a, 0x19, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x45, 0x6c,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x29, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6d, 0x0a, 0x1b, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x33, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x52, 0x0a, 0x1a, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22,
	0x51, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_offchainreporting3_messages_proto_rawDescOnce sync.Once
	file_offchainreporting3_messages_proto_rawDescData = file_offchainreporting3_messages_proto_rawDesc
)

func file_offchainreporting3_messages_proto_rawDescGZIP() []byte {
	file_offchainreporting3_messages_proto_rawDescOnce.Do(func() {
		file_offchainreporting3_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_offchainreporting3_messages_proto_rawDescData)
	})
	return file_offchainreporting3_messages_proto_rawDescData
}

var file_offchainreporting3_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_offchainreporting3_messages_proto_goTypes = []interface{}{
	(*MessageWrapper)(nil),                            // 0: offchainreporting3.MessageWrapper
	(*MessageNewEpochWish)(nil),                       // 1: offchainreporting3.MessageNewEpochWish
	(*MessageEpochStartRequest)(nil),                  // 2: offchainreporting3.MessageEpochStartRequest
	(*MessageEpochStart)(nil),                         // 3: offchainreporting3.MessageEpochStart
	(*MessageRoundStart)(nil),                         // 4: offchainreporting3.MessageRoundStart
	(*MessageObservation)(nil),                        // 5: offchainreporting3.MessageObservation
	(*MessageProposal)(nil),                           // 6: offchainreporting3.MessageProposal
	(*MessagePrepare)(nil),                            // 7: offchainreporting3.MessagePrepare
	(*MessageCommit)(nil),                             // 8: offchainreporting3.MessageCommit
	(*MessageReportSignatures)(nil),                   // 9: offchainreporting3.MessageReportSignatures
	(*MessageCertifiedCommitRequest)(nil),             // 10: offchainreporting3.MessageCertifiedCommitRequest
	(*MessageCertifiedCommit)(nil),                    // 11: offchainreporting3.MessageCertifiedCommit
	(*EpochStartProof)(nil),                           // 12: offchainreporting3.EpochStartProof
	(*CertifiedPrepareOrCommit)(nil),                  // 13: offchainreporting3.CertifiedPrepareOrCommit
	(*CertifiedPrepare)(nil),                          // 14: offchainreporting3.CertifiedPrepare
	(*CertifiedCommit)(nil),                           // 15: offchainreporting3.CertifiedCommit
	(*HighestCertifiedTimestamp)(nil),                 // 16: offchainreporting3.HighestCertifiedTimestamp
	(*AttributedSignedHighestCertifiedTimestamp)(nil), // 17: offchainreporting3.AttributedSignedHighestCertifiedTimestamp
	(*SignedHighestCertifiedTimestamp)(nil),           // 18: offchainreporting3.SignedHighestCertifiedTimestamp
	(*AttributedSignedObservation)(nil),               // 19: offchainreporting3.AttributedSignedObservation
	(*SignedObservation)(nil),                         // 20: offchainreporting3.SignedObservation
	(*AttributedPrepareSignature)(nil),                // 21: offchainreporting3.AttributedPrepareSignature
	(*AttributedCommitSignature)(nil),                 // 22: offchainreporting3.AttributedCommitSignature
}
var file_offchainreporting3_messages_proto_depIdxs = []int32{
	1,  // 0: offchainreporting3.MessageWrapper.message_new_epoch_wish:type_name -> offchainreporting3.MessageNewEpochWish
	2,  // 1: offchainreporting3.MessageWrapper.message_epoch_start_request:type_name -> offchainreporting3.MessageEpochStartRequest
	3,  // 2: offchainreporting3.MessageWrapper.message_epoch_start:type_name -> offchainreporting3.MessageEpochStart
	4,  // 3: offchainreporting3.MessageWrapper.message_round_start:type_name -> offchainreporting3.MessageRoundStart
	5,  // 4: offchainreporting3.MessageWrapper.message_observation:type_name -> offchainreporting3.MessageObservation
	6,  // 5: offchainreporting3.MessageWrapper.message_proposal:type_name -> offchainreporting3.MessageProposal
	7,  // 6: offchainreporting3.MessageWrapper.message_prepare:type_name -> offchainreporting3.MessagePrepare
	8,  // 7: offchainreporting3.MessageWrapper.message_commit:type_name -> offchainreporting3.MessageCommit
	9,  // 8: offchainreporting3.MessageWrapper.message_report_signatures:type_name -> offchainreporting3.MessageReportSignatures
	10, // 9: offchainreporting3.MessageWrapper.message_certified_commit_request:type_name -> offchainreporting3.MessageCertifiedCommitRequest
	11, // 10: offchainreporting3.MessageWrapper.message_certified_commit:type_name -> offchainreporting3.MessageCertifiedCommit
	13, // 11: offchainreporting3.MessageEpochStartRequest.highest_certified:type_name -> offchainreporting3.CertifiedPrepareOrCommit
	18, // 12: offchainreporting3.MessageEpochStartRequest.signed_highest_certified_timestamp:type_name -> offchainreporting3.SignedHighestCertifiedTimestamp
	12, // 13: offchainreporting3.MessageEpochStart.epoch_start_proof:type_name -> offchainreporting3.EpochStartProof
	20, // 14: offchainreporting3.MessageObservation.signed_observation:type_name -> offchainreporting3.SignedObservation
	19, // 15: offchainreporting3.MessageProposal.attributed_signed_observations:type_name -> offchainreporting3.AttributedSignedObservation
	15, // 16: offchainreporting3.MessageCertifiedCommit.certified_commit:type_name -> offchainreporting3.CertifiedCommit
	13, // 17: offchainreporting3.EpochStartProof.highest_certified:type_name -> offchainreporting3.CertifiedPrepareOrCommit
	17, // 18: offchainreporting3.EpochStartProof.highest_certified_proof:type_name -> offchainreporting3.AttributedSignedHighestCertifiedTimestamp
	14, // 19: offchainreporting3.CertifiedPrepareOrCommit.prepare:type_name -> offchainreporting3.CertifiedPrepare
	15, // 20: offchainreporting3.CertifiedPrepareOrCommit.commit:type_name -> offchainreporting3.CertifiedCommit
	21, // 21: offchainreporting3.CertifiedPrepare.prepare_quorum_certificate:type_name -> offchainreporting3.AttributedPrepareSignature
	22, // 22: offchainreporting3.CertifiedCommit.commit_quorum_certificate:type_name -> offchainreporting3.AttributedCommitSignature
	18, // 23: offchainreporting3.AttributedSignedHighestCertifiedTimestamp.signed_highest_certified_timestamp:type_name -> offchainreporting3.SignedHighestCertifiedTimestamp
	16, // 24: offchainreporting3.SignedHighestCertifiedTimestamp.highest_certified_timestamp:type_name -> offchainreporting3.HighestCertifiedTimestamp
	20, // 25: offchainreporting3.AttributedSignedObservation.signed_observation:type_name -> offchainreporting3.SignedObservation
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_offchainreporting3_messages_proto_init() }
func file_offchainreporting3_messages_proto_init() {
	if File_offchainreporting3_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offchainreporting3_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNewEpochWish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEpochStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEpochStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRoundStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReportSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCertifiedCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCertifiedCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochStartProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepareOrCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertifiedCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedHighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedHighestCertifiedTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedPrepareSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offchainreporting3_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedCommitSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_offchainreporting3_messages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MessageWrapper_MessageNewEpochWish)(nil),
		(*MessageWrapper_MessageEpochStartRequest)(nil),
		(*MessageWrapper_MessageEpochStart)(nil),
		(*MessageWrapper_MessageRoundStart)(nil),
		(*MessageWrapper_MessageObservation)(nil),
		(*MessageWrapper_MessageProposal)(nil),
		(*MessageWrapper_MessagePrepare)(nil),
		(*MessageWrapper_MessageCommit)(nil),
		(*MessageWrapper_MessageReportSignatures)(nil),
		(*MessageWrapper_MessageCertifiedCommitRequest)(nil),
		(*MessageWrapper_MessageCertifiedCommit)(nil),
	}
	file_offchainreporting3_messages_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CertifiedPrepareOrCommit_Prepare)(nil),
		(*CertifiedPrepareOrCommit_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offchainreporting3_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_offchainreporting3_messages_proto_goTypes,
		DependencyIndexes: file_offchainreporting3_messages_proto_depIdxs,
		MessageInfos:      file_offchainreporting3_messages_proto_msgTypes,
	}.Build()
	File_offchainreporting3_messages_proto = out.File
	file_offchainreporting3_messages_proto_rawDesc = nil
	file_offchainreporting3_messages_proto_goTypes = nil
	file_offchainreporting3_messages_proto_depIdxs = nil
}
